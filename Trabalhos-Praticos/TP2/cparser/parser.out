Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> global_declarations
Rule 2     global_declarations -> global_declarations global_declaration
Rule 3     global_declarations -> global_declaration
Rule 4     global_declaration -> function_declaration
Rule 5     global_declaration -> var_declaration
Rule 6     global_declaration -> short_var_declaration
Rule 7     function_declaration -> FUNC ID LPAREN parameters_opt RPAREN type block
Rule 8     parameters_opt -> parameters
Rule 9     parameters -> empty
Rule 10    parameters -> parameters COMMA parameter
Rule 11    parameters -> parameter
Rule 12    parameter -> ID type
Rule 13    block -> LBRACE block_contents RBRACE
Rule 14    block -> LBRACE RBRACE
Rule 15    block_contents -> statements
Rule 16    statements -> statements statement
Rule 17    statements -> statement
Rule 18    statement -> var_declaration
Rule 19    statement -> short_var_declaration
Rule 20    statement -> expression_statement
Rule 21    statement -> if_statement
Rule 22    statement -> for_statement
Rule 23    statement -> switch_statement
Rule 24    statement -> return_statement
Rule 25    statement -> assignment
Rule 26    statement -> CONTINUE SEMICOLON
Rule 27    statement -> BREAK SEMICOLON
Rule 28    expression_statement -> expression SEMICOLON
Rule 29    if_statement -> IF expression block else_clause
Rule 30    else_clause -> ELSE if_statement
Rule 31    else_clause -> ELSE block
Rule 32    else_clause -> empty
Rule 33    for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post block
Rule 34    for_statement -> FOR expression block
Rule 35    for_statement -> FOR block
Rule 36    for_init -> ID WALRUS expression
Rule 37    for_init -> VAR ID type EQUAL expression
Rule 38    for_post -> assignment
Rule 39    for_post -> expression
Rule 40    switch_statement -> SWITCH expression LBRACE switch_cases default_clause RBRACE
Rule 41    switch_cases -> switch_cases switch_case
Rule 42    switch_cases -> switch_case
Rule 43    switch_case -> CASE expression COLON statements
Rule 44    default_clause -> DEFAULT COLON statements
Rule 45    default_clause -> empty
Rule 46    return_statement -> RETURN expression_opt SEMICOLON
Rule 47    expression_opt -> expression
Rule 48    expression_opt -> empty
Rule 49    var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON
Rule 50    var_declaration -> VAR ID array_type SEMICOLON
Rule 51    var_declaration -> ID WALRUS array_type array_initializer SEMICOLON
Rule 52    var_declaration -> VAR ID type EQUAL expression SEMICOLON
Rule 53    var_declaration -> VAR ID type SEMICOLON
Rule 54    short_var_declaration -> ID WALRUS expression SEMICOLON
Rule 55    array_type -> type LBRACKET NUMBER_LITERAL RBRACKET
Rule 56    array_type -> array_type LBRACKET NUMBER_LITERAL RBRACKET
Rule 57    array_type -> type LBRACKET RBRACKET
Rule 58    array_type -> array_type LBRACKET RBRACKET
Rule 59    array_initializer -> LBRACE RBRACE
Rule 60    array_initializer -> LBRACE expression_list RBRACE
Rule 61    array_initializer -> LBRACE nested_initializer_list RBRACE
Rule 62    nested_initializer_list -> array_initializer
Rule 63    nested_initializer_list -> nested_initializer_list COMMA array_initializer
Rule 64    array_access -> ID LBRACKET expression RBRACKET
Rule 65    array_access -> array_access LBRACKET expression RBRACKET
Rule 66    assignment -> ID EQUAL expression SEMICOLON
Rule 67    assignment -> array_access EQUAL expression SEMICOLON
Rule 68    assignment -> ID EQUAL array_initializer SEMICOLON
Rule 69    expression -> expression PLUS expression
Rule 70    expression -> expression MINUS expression
Rule 71    expression -> expression TIMES expression
Rule 72    expression -> expression DIVIDE expression
Rule 73    expression -> expression MODULO expression
Rule 74    expression -> expression EQUALITY expression
Rule 75    expression -> expression NOTEQUAL expression
Rule 76    expression -> expression GREATER expression
Rule 77    expression -> expression LESS expression
Rule 78    expression -> expression GREATEROREQUAL expression
Rule 79    expression -> expression LESSOREQUAL expression
Rule 80    expression -> expression CONDITIONALAND expression
Rule 81    expression -> expression CONDITIONALOR expression
Rule 82    expression -> NOT expression
Rule 83    expression -> MINUS expression
Rule 84    expression -> LPAREN expression RPAREN
Rule 85    expression -> literal
Rule 86    expression -> ID
Rule 87    expression -> array_access
Rule 88    expression -> ID INCREMENT
Rule 89    expression -> ID DECREMENT
Rule 90    expression -> function_call
Rule 91    function_call -> ID LPAREN arguments_opt RPAREN
Rule 92    arguments_opt -> arguments
Rule 93    arguments -> empty
Rule 94    arguments -> arguments COMMA expression
Rule 95    arguments -> expression
Rule 96    expression_list -> expression_list COMMA expression
Rule 97    expression_list -> expression
Rule 98    literal -> NUMBER_LITERAL
Rule 99    literal -> STRING_LITERAL
Rule 100   literal -> BOOLEAN_LITERAL
Rule 101   type -> INT
Rule 102   type -> FLOAT
Rule 103   type -> BOOL
Rule 104   type -> STRING
Rule 105   type -> VOID
Rule 106   empty -> <empty>

Terminals, with rules where they appear

BOOL                 : 103
BOOLEAN_LITERAL      : 100
BREAK                : 27
CASE                 : 43
COLON                : 43 44
COMMA                : 10 63 94 96
CONDITIONALAND       : 80
CONDITIONALOR        : 81
CONTINUE             : 26
DECREMENT            : 89
DEFAULT              : 44
DIVIDE               : 72
ELSE                 : 30 31
EQUAL                : 37 49 52 66 67 68
EQUALITY             : 74
FLOAT                : 102
FOR                  : 33 34 35
FUNC                 : 7
GREATER              : 76
GREATEROREQUAL       : 78
ID                   : 7 12 36 37 49 50 51 52 53 54 64 66 68 86 88 89 91
IF                   : 29
INCREMENT            : 88
INT                  : 101
LBRACE               : 13 14 40 59 60 61
LBRACKET             : 55 56 57 58 64 65
LESS                 : 77
LESSOREQUAL          : 79
LPAREN               : 7 84 91
MINUS                : 70 83
MODULO               : 73
NOT                  : 82
NOTEQUAL             : 75
NUMBER_LITERAL       : 55 56 98
PLUS                 : 69
RBRACE               : 13 14 40 59 60 61
RBRACKET             : 55 56 57 58 64 65
RETURN               : 46
RPAREN               : 7 84 91
SEMICOLON            : 26 27 28 33 33 46 49 50 51 52 53 54 66 67 68
STRING               : 104
STRING_LITERAL       : 99
SWITCH               : 40
TIMES                : 71
VAR                  : 37 49 50 52 53
VOID                 : 105
WALRUS               : 36 51 54
error                : 

Nonterminals, with rules where they appear

arguments            : 92 94
arguments_opt        : 91
array_access         : 65 67 87
array_initializer    : 49 51 62 63 68
array_type           : 49 50 51 56 58
assignment           : 25 38
block                : 7 29 31 33 34 35
block_contents       : 13
default_clause       : 40
else_clause          : 29
empty                : 9 32 45 48 93
expression           : 28 29 33 34 36 37 39 40 43 47 52 54 64 65 66 67 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 81 82 83 84 94 95 96 97
expression_list      : 60 96
expression_opt       : 46
expression_statement : 20
for_init             : 33
for_post             : 33
for_statement        : 22
function_call        : 90
function_declaration : 4
global_declaration   : 2 3
global_declarations  : 1 2
if_statement         : 21 30
literal              : 85
nested_initializer_list : 61 63
parameter            : 10 11
parameters           : 8 10
parameters_opt       : 7
program              : 0
return_statement     : 24
short_var_declaration : 6 19
statement            : 16 17
statements           : 15 16 43 44
switch_case          : 41 42
switch_cases         : 40 41
switch_statement     : 23
type                 : 7 12 37 52 53 55 57
var_declaration      : 5 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_declarations
    (2) global_declarations -> . global_declarations global_declaration
    (3) global_declarations -> . global_declaration
    (4) global_declaration -> . function_declaration
    (5) global_declaration -> . var_declaration
    (6) global_declaration -> . short_var_declaration
    (7) function_declaration -> . FUNC ID LPAREN parameters_opt RPAREN type block
    (49) var_declaration -> . VAR ID array_type EQUAL array_initializer SEMICOLON
    (50) var_declaration -> . VAR ID array_type SEMICOLON
    (51) var_declaration -> . ID WALRUS array_type array_initializer SEMICOLON
    (52) var_declaration -> . VAR ID type EQUAL expression SEMICOLON
    (53) var_declaration -> . VAR ID type SEMICOLON
    (54) short_var_declaration -> . ID WALRUS expression SEMICOLON

    FUNC            shift and go to state 7
    VAR             shift and go to state 9
    ID              shift and go to state 8

    program                        shift and go to state 1
    global_declarations            shift and go to state 2
    global_declaration             shift and go to state 3
    function_declaration           shift and go to state 4
    var_declaration                shift and go to state 5
    short_var_declaration          shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> global_declarations .
    (2) global_declarations -> global_declarations . global_declaration
    (4) global_declaration -> . function_declaration
    (5) global_declaration -> . var_declaration
    (6) global_declaration -> . short_var_declaration
    (7) function_declaration -> . FUNC ID LPAREN parameters_opt RPAREN type block
    (49) var_declaration -> . VAR ID array_type EQUAL array_initializer SEMICOLON
    (50) var_declaration -> . VAR ID array_type SEMICOLON
    (51) var_declaration -> . ID WALRUS array_type array_initializer SEMICOLON
    (52) var_declaration -> . VAR ID type EQUAL expression SEMICOLON
    (53) var_declaration -> . VAR ID type SEMICOLON
    (54) short_var_declaration -> . ID WALRUS expression SEMICOLON

    $end            reduce using rule 1 (program -> global_declarations .)
    FUNC            shift and go to state 7
    VAR             shift and go to state 9
    ID              shift and go to state 8

    global_declaration             shift and go to state 10
    function_declaration           shift and go to state 4
    var_declaration                shift and go to state 5
    short_var_declaration          shift and go to state 6

state 3

    (3) global_declarations -> global_declaration .

    FUNC            reduce using rule 3 (global_declarations -> global_declaration .)
    VAR             reduce using rule 3 (global_declarations -> global_declaration .)
    ID              reduce using rule 3 (global_declarations -> global_declaration .)
    $end            reduce using rule 3 (global_declarations -> global_declaration .)


state 4

    (4) global_declaration -> function_declaration .

    FUNC            reduce using rule 4 (global_declaration -> function_declaration .)
    VAR             reduce using rule 4 (global_declaration -> function_declaration .)
    ID              reduce using rule 4 (global_declaration -> function_declaration .)
    $end            reduce using rule 4 (global_declaration -> function_declaration .)


state 5

    (5) global_declaration -> var_declaration .

    FUNC            reduce using rule 5 (global_declaration -> var_declaration .)
    VAR             reduce using rule 5 (global_declaration -> var_declaration .)
    ID              reduce using rule 5 (global_declaration -> var_declaration .)
    $end            reduce using rule 5 (global_declaration -> var_declaration .)


state 6

    (6) global_declaration -> short_var_declaration .

    FUNC            reduce using rule 6 (global_declaration -> short_var_declaration .)
    VAR             reduce using rule 6 (global_declaration -> short_var_declaration .)
    ID              reduce using rule 6 (global_declaration -> short_var_declaration .)
    $end            reduce using rule 6 (global_declaration -> short_var_declaration .)


state 7

    (7) function_declaration -> FUNC . ID LPAREN parameters_opt RPAREN type block

    ID              shift and go to state 11


state 8

    (51) var_declaration -> ID . WALRUS array_type array_initializer SEMICOLON
    (54) short_var_declaration -> ID . WALRUS expression SEMICOLON

    WALRUS          shift and go to state 12


state 9

    (49) var_declaration -> VAR . ID array_type EQUAL array_initializer SEMICOLON
    (50) var_declaration -> VAR . ID array_type SEMICOLON
    (52) var_declaration -> VAR . ID type EQUAL expression SEMICOLON
    (53) var_declaration -> VAR . ID type SEMICOLON

    ID              shift and go to state 13


state 10

    (2) global_declarations -> global_declarations global_declaration .

    FUNC            reduce using rule 2 (global_declarations -> global_declarations global_declaration .)
    VAR             reduce using rule 2 (global_declarations -> global_declarations global_declaration .)
    ID              reduce using rule 2 (global_declarations -> global_declarations global_declaration .)
    $end            reduce using rule 2 (global_declarations -> global_declarations global_declaration .)


state 11

    (7) function_declaration -> FUNC ID . LPAREN parameters_opt RPAREN type block

    LPAREN          shift and go to state 14


state 12

    (51) var_declaration -> ID WALRUS . array_type array_initializer SEMICOLON
    (54) short_var_declaration -> ID WALRUS . expression SEMICOLON
    (55) array_type -> . type LBRACKET NUMBER_LITERAL RBRACKET
    (56) array_type -> . array_type LBRACKET NUMBER_LITERAL RBRACKET
    (57) array_type -> . type LBRACKET RBRACKET
    (58) array_type -> . array_type LBRACKET RBRACKET
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (101) type -> . INT
    (102) type -> . FLOAT
    (103) type -> . BOOL
    (104) type -> . STRING
    (105) type -> . VOID
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    BOOL            shift and go to state 28
    STRING          shift and go to state 29
    VOID            shift and go to state 30
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    array_type                     shift and go to state 16
    expression                     shift and go to state 17
    type                           shift and go to state 18
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 13

    (49) var_declaration -> VAR ID . array_type EQUAL array_initializer SEMICOLON
    (50) var_declaration -> VAR ID . array_type SEMICOLON
    (52) var_declaration -> VAR ID . type EQUAL expression SEMICOLON
    (53) var_declaration -> VAR ID . type SEMICOLON
    (55) array_type -> . type LBRACKET NUMBER_LITERAL RBRACKET
    (56) array_type -> . array_type LBRACKET NUMBER_LITERAL RBRACKET
    (57) array_type -> . type LBRACKET RBRACKET
    (58) array_type -> . array_type LBRACKET RBRACKET
    (101) type -> . INT
    (102) type -> . FLOAT
    (103) type -> . BOOL
    (104) type -> . STRING
    (105) type -> . VOID

    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    BOOL            shift and go to state 28
    STRING          shift and go to state 29
    VOID            shift and go to state 30

    array_type                     shift and go to state 33
    type                           shift and go to state 34

state 14

    (7) function_declaration -> FUNC ID LPAREN . parameters_opt RPAREN type block
    (8) parameters_opt -> . parameters
    (9) parameters -> . empty
    (10) parameters -> . parameters COMMA parameter
    (11) parameters -> . parameter
    (106) empty -> .
    (12) parameter -> . ID type

    COMMA           reduce using rule 106 (empty -> .)
    RPAREN          reduce using rule 106 (empty -> .)
    ID              shift and go to state 35

    parameters_opt                 shift and go to state 36
    parameters                     shift and go to state 37
    empty                          shift and go to state 38
    parameter                      shift and go to state 39

state 15

    (86) expression -> ID .
    (88) expression -> ID . INCREMENT
    (89) expression -> ID . DECREMENT
    (64) array_access -> ID . LBRACKET expression RBRACKET
    (91) function_call -> ID . LPAREN arguments_opt RPAREN

    SEMICOLON       reduce using rule 86 (expression -> ID .)
    PLUS            reduce using rule 86 (expression -> ID .)
    MINUS           reduce using rule 86 (expression -> ID .)
    TIMES           reduce using rule 86 (expression -> ID .)
    DIVIDE          reduce using rule 86 (expression -> ID .)
    MODULO          reduce using rule 86 (expression -> ID .)
    EQUALITY        reduce using rule 86 (expression -> ID .)
    NOTEQUAL        reduce using rule 86 (expression -> ID .)
    GREATER         reduce using rule 86 (expression -> ID .)
    LESS            reduce using rule 86 (expression -> ID .)
    GREATEROREQUAL  reduce using rule 86 (expression -> ID .)
    LESSOREQUAL     reduce using rule 86 (expression -> ID .)
    CONDITIONALAND  reduce using rule 86 (expression -> ID .)
    CONDITIONALOR   reduce using rule 86 (expression -> ID .)
    RPAREN          reduce using rule 86 (expression -> ID .)
    RBRACKET        reduce using rule 86 (expression -> ID .)
    COMMA           reduce using rule 86 (expression -> ID .)
    RBRACE          reduce using rule 86 (expression -> ID .)
    LBRACE          reduce using rule 86 (expression -> ID .)
    COLON           reduce using rule 86 (expression -> ID .)
    INCREMENT       shift and go to state 40
    DECREMENT       shift and go to state 41
    LBRACKET        shift and go to state 42
    LPAREN          shift and go to state 43


state 16

    (51) var_declaration -> ID WALRUS array_type . array_initializer SEMICOLON
    (56) array_type -> array_type . LBRACKET NUMBER_LITERAL RBRACKET
    (58) array_type -> array_type . LBRACKET RBRACKET
    (59) array_initializer -> . LBRACE RBRACE
    (60) array_initializer -> . LBRACE expression_list RBRACE
    (61) array_initializer -> . LBRACE nested_initializer_list RBRACE

    LBRACKET        shift and go to state 45
    LBRACE          shift and go to state 46

    array_initializer              shift and go to state 44

state 17

    (54) short_var_declaration -> ID WALRUS expression . SEMICOLON
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60


state 18

    (55) array_type -> type . LBRACKET NUMBER_LITERAL RBRACKET
    (57) array_type -> type . LBRACKET RBRACKET

    LBRACKET        shift and go to state 61


state 19

    (98) literal -> NUMBER_LITERAL .

    SEMICOLON       reduce using rule 98 (literal -> NUMBER_LITERAL .)
    PLUS            reduce using rule 98 (literal -> NUMBER_LITERAL .)
    MINUS           reduce using rule 98 (literal -> NUMBER_LITERAL .)
    TIMES           reduce using rule 98 (literal -> NUMBER_LITERAL .)
    DIVIDE          reduce using rule 98 (literal -> NUMBER_LITERAL .)
    MODULO          reduce using rule 98 (literal -> NUMBER_LITERAL .)
    EQUALITY        reduce using rule 98 (literal -> NUMBER_LITERAL .)
    NOTEQUAL        reduce using rule 98 (literal -> NUMBER_LITERAL .)
    GREATER         reduce using rule 98 (literal -> NUMBER_LITERAL .)
    LESS            reduce using rule 98 (literal -> NUMBER_LITERAL .)
    GREATEROREQUAL  reduce using rule 98 (literal -> NUMBER_LITERAL .)
    LESSOREQUAL     reduce using rule 98 (literal -> NUMBER_LITERAL .)
    CONDITIONALAND  reduce using rule 98 (literal -> NUMBER_LITERAL .)
    CONDITIONALOR   reduce using rule 98 (literal -> NUMBER_LITERAL .)
    RPAREN          reduce using rule 98 (literal -> NUMBER_LITERAL .)
    RBRACKET        reduce using rule 98 (literal -> NUMBER_LITERAL .)
    COMMA           reduce using rule 98 (literal -> NUMBER_LITERAL .)
    RBRACE          reduce using rule 98 (literal -> NUMBER_LITERAL .)
    LBRACE          reduce using rule 98 (literal -> NUMBER_LITERAL .)
    COLON           reduce using rule 98 (literal -> NUMBER_LITERAL .)


state 20

    (83) expression -> MINUS . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 62
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 21

    (82) expression -> NOT . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 63
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 22

    (84) expression -> LPAREN . expression RPAREN
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 64
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 23

    (85) expression -> literal .

    SEMICOLON       reduce using rule 85 (expression -> literal .)
    PLUS            reduce using rule 85 (expression -> literal .)
    MINUS           reduce using rule 85 (expression -> literal .)
    TIMES           reduce using rule 85 (expression -> literal .)
    DIVIDE          reduce using rule 85 (expression -> literal .)
    MODULO          reduce using rule 85 (expression -> literal .)
    EQUALITY        reduce using rule 85 (expression -> literal .)
    NOTEQUAL        reduce using rule 85 (expression -> literal .)
    GREATER         reduce using rule 85 (expression -> literal .)
    LESS            reduce using rule 85 (expression -> literal .)
    GREATEROREQUAL  reduce using rule 85 (expression -> literal .)
    LESSOREQUAL     reduce using rule 85 (expression -> literal .)
    CONDITIONALAND  reduce using rule 85 (expression -> literal .)
    CONDITIONALOR   reduce using rule 85 (expression -> literal .)
    RPAREN          reduce using rule 85 (expression -> literal .)
    RBRACKET        reduce using rule 85 (expression -> literal .)
    COMMA           reduce using rule 85 (expression -> literal .)
    RBRACE          reduce using rule 85 (expression -> literal .)
    LBRACE          reduce using rule 85 (expression -> literal .)
    COLON           reduce using rule 85 (expression -> literal .)


state 24

    (87) expression -> array_access .
    (65) array_access -> array_access . LBRACKET expression RBRACKET

    SEMICOLON       reduce using rule 87 (expression -> array_access .)
    PLUS            reduce using rule 87 (expression -> array_access .)
    MINUS           reduce using rule 87 (expression -> array_access .)
    TIMES           reduce using rule 87 (expression -> array_access .)
    DIVIDE          reduce using rule 87 (expression -> array_access .)
    MODULO          reduce using rule 87 (expression -> array_access .)
    EQUALITY        reduce using rule 87 (expression -> array_access .)
    NOTEQUAL        reduce using rule 87 (expression -> array_access .)
    GREATER         reduce using rule 87 (expression -> array_access .)
    LESS            reduce using rule 87 (expression -> array_access .)
    GREATEROREQUAL  reduce using rule 87 (expression -> array_access .)
    LESSOREQUAL     reduce using rule 87 (expression -> array_access .)
    CONDITIONALAND  reduce using rule 87 (expression -> array_access .)
    CONDITIONALOR   reduce using rule 87 (expression -> array_access .)
    RPAREN          reduce using rule 87 (expression -> array_access .)
    RBRACKET        reduce using rule 87 (expression -> array_access .)
    COMMA           reduce using rule 87 (expression -> array_access .)
    RBRACE          reduce using rule 87 (expression -> array_access .)
    LBRACE          reduce using rule 87 (expression -> array_access .)
    COLON           reduce using rule 87 (expression -> array_access .)
    LBRACKET        shift and go to state 65


state 25

    (90) expression -> function_call .

    SEMICOLON       reduce using rule 90 (expression -> function_call .)
    PLUS            reduce using rule 90 (expression -> function_call .)
    MINUS           reduce using rule 90 (expression -> function_call .)
    TIMES           reduce using rule 90 (expression -> function_call .)
    DIVIDE          reduce using rule 90 (expression -> function_call .)
    MODULO          reduce using rule 90 (expression -> function_call .)
    EQUALITY        reduce using rule 90 (expression -> function_call .)
    NOTEQUAL        reduce using rule 90 (expression -> function_call .)
    GREATER         reduce using rule 90 (expression -> function_call .)
    LESS            reduce using rule 90 (expression -> function_call .)
    GREATEROREQUAL  reduce using rule 90 (expression -> function_call .)
    LESSOREQUAL     reduce using rule 90 (expression -> function_call .)
    CONDITIONALAND  reduce using rule 90 (expression -> function_call .)
    CONDITIONALOR   reduce using rule 90 (expression -> function_call .)
    RPAREN          reduce using rule 90 (expression -> function_call .)
    RBRACKET        reduce using rule 90 (expression -> function_call .)
    COMMA           reduce using rule 90 (expression -> function_call .)
    RBRACE          reduce using rule 90 (expression -> function_call .)
    LBRACE          reduce using rule 90 (expression -> function_call .)
    COLON           reduce using rule 90 (expression -> function_call .)


state 26

    (101) type -> INT .

    LBRACKET        reduce using rule 101 (type -> INT .)
    EQUAL           reduce using rule 101 (type -> INT .)
    SEMICOLON       reduce using rule 101 (type -> INT .)
    COMMA           reduce using rule 101 (type -> INT .)
    RPAREN          reduce using rule 101 (type -> INT .)
    LBRACE          reduce using rule 101 (type -> INT .)


state 27

    (102) type -> FLOAT .

    LBRACKET        reduce using rule 102 (type -> FLOAT .)
    EQUAL           reduce using rule 102 (type -> FLOAT .)
    SEMICOLON       reduce using rule 102 (type -> FLOAT .)
    COMMA           reduce using rule 102 (type -> FLOAT .)
    RPAREN          reduce using rule 102 (type -> FLOAT .)
    LBRACE          reduce using rule 102 (type -> FLOAT .)


state 28

    (103) type -> BOOL .

    LBRACKET        reduce using rule 103 (type -> BOOL .)
    EQUAL           reduce using rule 103 (type -> BOOL .)
    SEMICOLON       reduce using rule 103 (type -> BOOL .)
    COMMA           reduce using rule 103 (type -> BOOL .)
    RPAREN          reduce using rule 103 (type -> BOOL .)
    LBRACE          reduce using rule 103 (type -> BOOL .)


state 29

    (104) type -> STRING .

    LBRACKET        reduce using rule 104 (type -> STRING .)
    EQUAL           reduce using rule 104 (type -> STRING .)
    SEMICOLON       reduce using rule 104 (type -> STRING .)
    COMMA           reduce using rule 104 (type -> STRING .)
    RPAREN          reduce using rule 104 (type -> STRING .)
    LBRACE          reduce using rule 104 (type -> STRING .)


state 30

    (105) type -> VOID .

    LBRACKET        reduce using rule 105 (type -> VOID .)
    EQUAL           reduce using rule 105 (type -> VOID .)
    SEMICOLON       reduce using rule 105 (type -> VOID .)
    COMMA           reduce using rule 105 (type -> VOID .)
    RPAREN          reduce using rule 105 (type -> VOID .)
    LBRACE          reduce using rule 105 (type -> VOID .)


state 31

    (99) literal -> STRING_LITERAL .

    SEMICOLON       reduce using rule 99 (literal -> STRING_LITERAL .)
    PLUS            reduce using rule 99 (literal -> STRING_LITERAL .)
    MINUS           reduce using rule 99 (literal -> STRING_LITERAL .)
    TIMES           reduce using rule 99 (literal -> STRING_LITERAL .)
    DIVIDE          reduce using rule 99 (literal -> STRING_LITERAL .)
    MODULO          reduce using rule 99 (literal -> STRING_LITERAL .)
    EQUALITY        reduce using rule 99 (literal -> STRING_LITERAL .)
    NOTEQUAL        reduce using rule 99 (literal -> STRING_LITERAL .)
    GREATER         reduce using rule 99 (literal -> STRING_LITERAL .)
    LESS            reduce using rule 99 (literal -> STRING_LITERAL .)
    GREATEROREQUAL  reduce using rule 99 (literal -> STRING_LITERAL .)
    LESSOREQUAL     reduce using rule 99 (literal -> STRING_LITERAL .)
    CONDITIONALAND  reduce using rule 99 (literal -> STRING_LITERAL .)
    CONDITIONALOR   reduce using rule 99 (literal -> STRING_LITERAL .)
    RPAREN          reduce using rule 99 (literal -> STRING_LITERAL .)
    RBRACKET        reduce using rule 99 (literal -> STRING_LITERAL .)
    COMMA           reduce using rule 99 (literal -> STRING_LITERAL .)
    RBRACE          reduce using rule 99 (literal -> STRING_LITERAL .)
    LBRACE          reduce using rule 99 (literal -> STRING_LITERAL .)
    COLON           reduce using rule 99 (literal -> STRING_LITERAL .)


state 32

    (100) literal -> BOOLEAN_LITERAL .

    SEMICOLON       reduce using rule 100 (literal -> BOOLEAN_LITERAL .)
    PLUS            reduce using rule 100 (literal -> BOOLEAN_LITERAL .)
    MINUS           reduce using rule 100 (literal -> BOOLEAN_LITERAL .)
    TIMES           reduce using rule 100 (literal -> BOOLEAN_LITERAL .)
    DIVIDE          reduce using rule 100 (literal -> BOOLEAN_LITERAL .)
    MODULO          reduce using rule 100 (literal -> BOOLEAN_LITERAL .)
    EQUALITY        reduce using rule 100 (literal -> BOOLEAN_LITERAL .)
    NOTEQUAL        reduce using rule 100 (literal -> BOOLEAN_LITERAL .)
    GREATER         reduce using rule 100 (literal -> BOOLEAN_LITERAL .)
    LESS            reduce using rule 100 (literal -> BOOLEAN_LITERAL .)
    GREATEROREQUAL  reduce using rule 100 (literal -> BOOLEAN_LITERAL .)
    LESSOREQUAL     reduce using rule 100 (literal -> BOOLEAN_LITERAL .)
    CONDITIONALAND  reduce using rule 100 (literal -> BOOLEAN_LITERAL .)
    CONDITIONALOR   reduce using rule 100 (literal -> BOOLEAN_LITERAL .)
    RPAREN          reduce using rule 100 (literal -> BOOLEAN_LITERAL .)
    RBRACKET        reduce using rule 100 (literal -> BOOLEAN_LITERAL .)
    COMMA           reduce using rule 100 (literal -> BOOLEAN_LITERAL .)
    RBRACE          reduce using rule 100 (literal -> BOOLEAN_LITERAL .)
    LBRACE          reduce using rule 100 (literal -> BOOLEAN_LITERAL .)
    COLON           reduce using rule 100 (literal -> BOOLEAN_LITERAL .)


state 33

    (49) var_declaration -> VAR ID array_type . EQUAL array_initializer SEMICOLON
    (50) var_declaration -> VAR ID array_type . SEMICOLON
    (56) array_type -> array_type . LBRACKET NUMBER_LITERAL RBRACKET
    (58) array_type -> array_type . LBRACKET RBRACKET

    EQUAL           shift and go to state 66
    SEMICOLON       shift and go to state 67
    LBRACKET        shift and go to state 45


state 34

    (52) var_declaration -> VAR ID type . EQUAL expression SEMICOLON
    (53) var_declaration -> VAR ID type . SEMICOLON
    (55) array_type -> type . LBRACKET NUMBER_LITERAL RBRACKET
    (57) array_type -> type . LBRACKET RBRACKET

    EQUAL           shift and go to state 68
    SEMICOLON       shift and go to state 69
    LBRACKET        shift and go to state 61


state 35

    (12) parameter -> ID . type
    (101) type -> . INT
    (102) type -> . FLOAT
    (103) type -> . BOOL
    (104) type -> . STRING
    (105) type -> . VOID

    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    BOOL            shift and go to state 28
    STRING          shift and go to state 29
    VOID            shift and go to state 30

    type                           shift and go to state 70

state 36

    (7) function_declaration -> FUNC ID LPAREN parameters_opt . RPAREN type block

    RPAREN          shift and go to state 71


state 37

    (8) parameters_opt -> parameters .
    (10) parameters -> parameters . COMMA parameter

    RPAREN          reduce using rule 8 (parameters_opt -> parameters .)
    COMMA           shift and go to state 72


state 38

    (9) parameters -> empty .

    COMMA           reduce using rule 9 (parameters -> empty .)
    RPAREN          reduce using rule 9 (parameters -> empty .)


state 39

    (11) parameters -> parameter .

    COMMA           reduce using rule 11 (parameters -> parameter .)
    RPAREN          reduce using rule 11 (parameters -> parameter .)


state 40

    (88) expression -> ID INCREMENT .

    SEMICOLON       reduce using rule 88 (expression -> ID INCREMENT .)
    PLUS            reduce using rule 88 (expression -> ID INCREMENT .)
    MINUS           reduce using rule 88 (expression -> ID INCREMENT .)
    TIMES           reduce using rule 88 (expression -> ID INCREMENT .)
    DIVIDE          reduce using rule 88 (expression -> ID INCREMENT .)
    MODULO          reduce using rule 88 (expression -> ID INCREMENT .)
    EQUALITY        reduce using rule 88 (expression -> ID INCREMENT .)
    NOTEQUAL        reduce using rule 88 (expression -> ID INCREMENT .)
    GREATER         reduce using rule 88 (expression -> ID INCREMENT .)
    LESS            reduce using rule 88 (expression -> ID INCREMENT .)
    GREATEROREQUAL  reduce using rule 88 (expression -> ID INCREMENT .)
    LESSOREQUAL     reduce using rule 88 (expression -> ID INCREMENT .)
    CONDITIONALAND  reduce using rule 88 (expression -> ID INCREMENT .)
    CONDITIONALOR   reduce using rule 88 (expression -> ID INCREMENT .)
    RPAREN          reduce using rule 88 (expression -> ID INCREMENT .)
    RBRACKET        reduce using rule 88 (expression -> ID INCREMENT .)
    COMMA           reduce using rule 88 (expression -> ID INCREMENT .)
    RBRACE          reduce using rule 88 (expression -> ID INCREMENT .)
    LBRACE          reduce using rule 88 (expression -> ID INCREMENT .)
    COLON           reduce using rule 88 (expression -> ID INCREMENT .)


state 41

    (89) expression -> ID DECREMENT .

    SEMICOLON       reduce using rule 89 (expression -> ID DECREMENT .)
    PLUS            reduce using rule 89 (expression -> ID DECREMENT .)
    MINUS           reduce using rule 89 (expression -> ID DECREMENT .)
    TIMES           reduce using rule 89 (expression -> ID DECREMENT .)
    DIVIDE          reduce using rule 89 (expression -> ID DECREMENT .)
    MODULO          reduce using rule 89 (expression -> ID DECREMENT .)
    EQUALITY        reduce using rule 89 (expression -> ID DECREMENT .)
    NOTEQUAL        reduce using rule 89 (expression -> ID DECREMENT .)
    GREATER         reduce using rule 89 (expression -> ID DECREMENT .)
    LESS            reduce using rule 89 (expression -> ID DECREMENT .)
    GREATEROREQUAL  reduce using rule 89 (expression -> ID DECREMENT .)
    LESSOREQUAL     reduce using rule 89 (expression -> ID DECREMENT .)
    CONDITIONALAND  reduce using rule 89 (expression -> ID DECREMENT .)
    CONDITIONALOR   reduce using rule 89 (expression -> ID DECREMENT .)
    RPAREN          reduce using rule 89 (expression -> ID DECREMENT .)
    RBRACKET        reduce using rule 89 (expression -> ID DECREMENT .)
    COMMA           reduce using rule 89 (expression -> ID DECREMENT .)
    RBRACE          reduce using rule 89 (expression -> ID DECREMENT .)
    LBRACE          reduce using rule 89 (expression -> ID DECREMENT .)
    COLON           reduce using rule 89 (expression -> ID DECREMENT .)


state 42

    (64) array_access -> ID LBRACKET . expression RBRACKET
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 73
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 43

    (91) function_call -> ID LPAREN . arguments_opt RPAREN
    (92) arguments_opt -> . arguments
    (93) arguments -> . empty
    (94) arguments -> . arguments COMMA expression
    (95) arguments -> . expression
    (106) empty -> .
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    COMMA           reduce using rule 106 (empty -> .)
    RPAREN          reduce using rule 106 (empty -> .)
    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    arguments_opt                  shift and go to state 74
    arguments                      shift and go to state 75
    empty                          shift and go to state 76
    expression                     shift and go to state 77
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 44

    (51) var_declaration -> ID WALRUS array_type array_initializer . SEMICOLON

    SEMICOLON       shift and go to state 78


state 45

    (56) array_type -> array_type LBRACKET . NUMBER_LITERAL RBRACKET
    (58) array_type -> array_type LBRACKET . RBRACKET

    NUMBER_LITERAL  shift and go to state 79
    RBRACKET        shift and go to state 80


state 46

    (59) array_initializer -> LBRACE . RBRACE
    (60) array_initializer -> LBRACE . expression_list RBRACE
    (61) array_initializer -> LBRACE . nested_initializer_list RBRACE
    (96) expression_list -> . expression_list COMMA expression
    (97) expression_list -> . expression
    (62) nested_initializer_list -> . array_initializer
    (63) nested_initializer_list -> . nested_initializer_list COMMA array_initializer
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (59) array_initializer -> . LBRACE RBRACE
    (60) array_initializer -> . LBRACE expression_list RBRACE
    (61) array_initializer -> . LBRACE nested_initializer_list RBRACE
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    RBRACE          shift and go to state 81
    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    LBRACE          shift and go to state 46
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression_list                shift and go to state 82
    nested_initializer_list        shift and go to state 83
    expression                     shift and go to state 84
    array_initializer              shift and go to state 85
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 47

    (54) short_var_declaration -> ID WALRUS expression SEMICOLON .

    FUNC            reduce using rule 54 (short_var_declaration -> ID WALRUS expression SEMICOLON .)
    VAR             reduce using rule 54 (short_var_declaration -> ID WALRUS expression SEMICOLON .)
    ID              reduce using rule 54 (short_var_declaration -> ID WALRUS expression SEMICOLON .)
    $end            reduce using rule 54 (short_var_declaration -> ID WALRUS expression SEMICOLON .)
    CONTINUE        reduce using rule 54 (short_var_declaration -> ID WALRUS expression SEMICOLON .)
    BREAK           reduce using rule 54 (short_var_declaration -> ID WALRUS expression SEMICOLON .)
    IF              reduce using rule 54 (short_var_declaration -> ID WALRUS expression SEMICOLON .)
    FOR             reduce using rule 54 (short_var_declaration -> ID WALRUS expression SEMICOLON .)
    SWITCH          reduce using rule 54 (short_var_declaration -> ID WALRUS expression SEMICOLON .)
    RETURN          reduce using rule 54 (short_var_declaration -> ID WALRUS expression SEMICOLON .)
    NOT             reduce using rule 54 (short_var_declaration -> ID WALRUS expression SEMICOLON .)
    MINUS           reduce using rule 54 (short_var_declaration -> ID WALRUS expression SEMICOLON .)
    LPAREN          reduce using rule 54 (short_var_declaration -> ID WALRUS expression SEMICOLON .)
    NUMBER_LITERAL  reduce using rule 54 (short_var_declaration -> ID WALRUS expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 54 (short_var_declaration -> ID WALRUS expression SEMICOLON .)
    BOOLEAN_LITERAL reduce using rule 54 (short_var_declaration -> ID WALRUS expression SEMICOLON .)
    RBRACE          reduce using rule 54 (short_var_declaration -> ID WALRUS expression SEMICOLON .)
    DEFAULT         reduce using rule 54 (short_var_declaration -> ID WALRUS expression SEMICOLON .)
    CASE            reduce using rule 54 (short_var_declaration -> ID WALRUS expression SEMICOLON .)


state 48

    (69) expression -> expression PLUS . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 86
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 49

    (70) expression -> expression MINUS . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 87
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 50

    (71) expression -> expression TIMES . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 88
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 51

    (72) expression -> expression DIVIDE . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 89
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 52

    (73) expression -> expression MODULO . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 90
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 53

    (74) expression -> expression EQUALITY . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 91
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 54

    (75) expression -> expression NOTEQUAL . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 92
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 55

    (76) expression -> expression GREATER . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 93
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 56

    (77) expression -> expression LESS . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 94
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 57

    (78) expression -> expression GREATEROREQUAL . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 95
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 58

    (79) expression -> expression LESSOREQUAL . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 96
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 59

    (80) expression -> expression CONDITIONALAND . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 97
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 60

    (81) expression -> expression CONDITIONALOR . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 98
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 61

    (55) array_type -> type LBRACKET . NUMBER_LITERAL RBRACKET
    (57) array_type -> type LBRACKET . RBRACKET

    NUMBER_LITERAL  shift and go to state 99
    RBRACKET        shift and go to state 100


state 62

    (83) expression -> MINUS expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       reduce using rule 83 (expression -> MINUS expression .)
    PLUS            reduce using rule 83 (expression -> MINUS expression .)
    MINUS           reduce using rule 83 (expression -> MINUS expression .)
    TIMES           reduce using rule 83 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 83 (expression -> MINUS expression .)
    MODULO          reduce using rule 83 (expression -> MINUS expression .)
    EQUALITY        reduce using rule 83 (expression -> MINUS expression .)
    NOTEQUAL        reduce using rule 83 (expression -> MINUS expression .)
    GREATER         reduce using rule 83 (expression -> MINUS expression .)
    LESS            reduce using rule 83 (expression -> MINUS expression .)
    GREATEROREQUAL  reduce using rule 83 (expression -> MINUS expression .)
    LESSOREQUAL     reduce using rule 83 (expression -> MINUS expression .)
    CONDITIONALAND  reduce using rule 83 (expression -> MINUS expression .)
    CONDITIONALOR   reduce using rule 83 (expression -> MINUS expression .)
    RPAREN          reduce using rule 83 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 83 (expression -> MINUS expression .)
    COMMA           reduce using rule 83 (expression -> MINUS expression .)
    RBRACE          reduce using rule 83 (expression -> MINUS expression .)
    LBRACE          reduce using rule 83 (expression -> MINUS expression .)
    COLON           reduce using rule 83 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MODULO          [ shift and go to state 52 ]
  ! EQUALITY        [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATER         [ shift and go to state 55 ]
  ! LESS            [ shift and go to state 56 ]
  ! GREATEROREQUAL  [ shift and go to state 57 ]
  ! LESSOREQUAL     [ shift and go to state 58 ]
  ! CONDITIONALAND  [ shift and go to state 59 ]
  ! CONDITIONALOR   [ shift and go to state 60 ]


state 63

    (82) expression -> NOT expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       reduce using rule 82 (expression -> NOT expression .)
    PLUS            reduce using rule 82 (expression -> NOT expression .)
    MINUS           reduce using rule 82 (expression -> NOT expression .)
    TIMES           reduce using rule 82 (expression -> NOT expression .)
    DIVIDE          reduce using rule 82 (expression -> NOT expression .)
    MODULO          reduce using rule 82 (expression -> NOT expression .)
    EQUALITY        reduce using rule 82 (expression -> NOT expression .)
    NOTEQUAL        reduce using rule 82 (expression -> NOT expression .)
    GREATER         reduce using rule 82 (expression -> NOT expression .)
    LESS            reduce using rule 82 (expression -> NOT expression .)
    GREATEROREQUAL  reduce using rule 82 (expression -> NOT expression .)
    LESSOREQUAL     reduce using rule 82 (expression -> NOT expression .)
    CONDITIONALAND  reduce using rule 82 (expression -> NOT expression .)
    CONDITIONALOR   reduce using rule 82 (expression -> NOT expression .)
    RPAREN          reduce using rule 82 (expression -> NOT expression .)
    RBRACKET        reduce using rule 82 (expression -> NOT expression .)
    COMMA           reduce using rule 82 (expression -> NOT expression .)
    RBRACE          reduce using rule 82 (expression -> NOT expression .)
    LBRACE          reduce using rule 82 (expression -> NOT expression .)
    COLON           reduce using rule 82 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MODULO          [ shift and go to state 52 ]
  ! EQUALITY        [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATER         [ shift and go to state 55 ]
  ! LESS            [ shift and go to state 56 ]
  ! GREATEROREQUAL  [ shift and go to state 57 ]
  ! LESSOREQUAL     [ shift and go to state 58 ]
  ! CONDITIONALAND  [ shift and go to state 59 ]
  ! CONDITIONALOR   [ shift and go to state 60 ]


state 64

    (84) expression -> LPAREN expression . RPAREN
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    RPAREN          shift and go to state 101
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60


state 65

    (65) array_access -> array_access LBRACKET . expression RBRACKET
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    array_access                   shift and go to state 24
    expression                     shift and go to state 102
    literal                        shift and go to state 23
    function_call                  shift and go to state 25

state 66

    (49) var_declaration -> VAR ID array_type EQUAL . array_initializer SEMICOLON
    (59) array_initializer -> . LBRACE RBRACE
    (60) array_initializer -> . LBRACE expression_list RBRACE
    (61) array_initializer -> . LBRACE nested_initializer_list RBRACE

    LBRACE          shift and go to state 46

    array_initializer              shift and go to state 103

state 67

    (50) var_declaration -> VAR ID array_type SEMICOLON .

    FUNC            reduce using rule 50 (var_declaration -> VAR ID array_type SEMICOLON .)
    VAR             reduce using rule 50 (var_declaration -> VAR ID array_type SEMICOLON .)
    ID              reduce using rule 50 (var_declaration -> VAR ID array_type SEMICOLON .)
    $end            reduce using rule 50 (var_declaration -> VAR ID array_type SEMICOLON .)
    CONTINUE        reduce using rule 50 (var_declaration -> VAR ID array_type SEMICOLON .)
    BREAK           reduce using rule 50 (var_declaration -> VAR ID array_type SEMICOLON .)
    IF              reduce using rule 50 (var_declaration -> VAR ID array_type SEMICOLON .)
    FOR             reduce using rule 50 (var_declaration -> VAR ID array_type SEMICOLON .)
    SWITCH          reduce using rule 50 (var_declaration -> VAR ID array_type SEMICOLON .)
    RETURN          reduce using rule 50 (var_declaration -> VAR ID array_type SEMICOLON .)
    NOT             reduce using rule 50 (var_declaration -> VAR ID array_type SEMICOLON .)
    MINUS           reduce using rule 50 (var_declaration -> VAR ID array_type SEMICOLON .)
    LPAREN          reduce using rule 50 (var_declaration -> VAR ID array_type SEMICOLON .)
    NUMBER_LITERAL  reduce using rule 50 (var_declaration -> VAR ID array_type SEMICOLON .)
    STRING_LITERAL  reduce using rule 50 (var_declaration -> VAR ID array_type SEMICOLON .)
    BOOLEAN_LITERAL reduce using rule 50 (var_declaration -> VAR ID array_type SEMICOLON .)
    RBRACE          reduce using rule 50 (var_declaration -> VAR ID array_type SEMICOLON .)
    DEFAULT         reduce using rule 50 (var_declaration -> VAR ID array_type SEMICOLON .)
    CASE            reduce using rule 50 (var_declaration -> VAR ID array_type SEMICOLON .)


state 68

    (52) var_declaration -> VAR ID type EQUAL . expression SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 104
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 69

    (53) var_declaration -> VAR ID type SEMICOLON .

    FUNC            reduce using rule 53 (var_declaration -> VAR ID type SEMICOLON .)
    VAR             reduce using rule 53 (var_declaration -> VAR ID type SEMICOLON .)
    ID              reduce using rule 53 (var_declaration -> VAR ID type SEMICOLON .)
    $end            reduce using rule 53 (var_declaration -> VAR ID type SEMICOLON .)
    CONTINUE        reduce using rule 53 (var_declaration -> VAR ID type SEMICOLON .)
    BREAK           reduce using rule 53 (var_declaration -> VAR ID type SEMICOLON .)
    IF              reduce using rule 53 (var_declaration -> VAR ID type SEMICOLON .)
    FOR             reduce using rule 53 (var_declaration -> VAR ID type SEMICOLON .)
    SWITCH          reduce using rule 53 (var_declaration -> VAR ID type SEMICOLON .)
    RETURN          reduce using rule 53 (var_declaration -> VAR ID type SEMICOLON .)
    NOT             reduce using rule 53 (var_declaration -> VAR ID type SEMICOLON .)
    MINUS           reduce using rule 53 (var_declaration -> VAR ID type SEMICOLON .)
    LPAREN          reduce using rule 53 (var_declaration -> VAR ID type SEMICOLON .)
    NUMBER_LITERAL  reduce using rule 53 (var_declaration -> VAR ID type SEMICOLON .)
    STRING_LITERAL  reduce using rule 53 (var_declaration -> VAR ID type SEMICOLON .)
    BOOLEAN_LITERAL reduce using rule 53 (var_declaration -> VAR ID type SEMICOLON .)
    RBRACE          reduce using rule 53 (var_declaration -> VAR ID type SEMICOLON .)
    DEFAULT         reduce using rule 53 (var_declaration -> VAR ID type SEMICOLON .)
    CASE            reduce using rule 53 (var_declaration -> VAR ID type SEMICOLON .)


state 70

    (12) parameter -> ID type .

    COMMA           reduce using rule 12 (parameter -> ID type .)
    RPAREN          reduce using rule 12 (parameter -> ID type .)


state 71

    (7) function_declaration -> FUNC ID LPAREN parameters_opt RPAREN . type block
    (101) type -> . INT
    (102) type -> . FLOAT
    (103) type -> . BOOL
    (104) type -> . STRING
    (105) type -> . VOID

    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    BOOL            shift and go to state 28
    STRING          shift and go to state 29
    VOID            shift and go to state 30

    type                           shift and go to state 105

state 72

    (10) parameters -> parameters COMMA . parameter
    (12) parameter -> . ID type

    ID              shift and go to state 35

    parameter                      shift and go to state 106

state 73

    (64) array_access -> ID LBRACKET expression . RBRACKET
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    RBRACKET        shift and go to state 107
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60


state 74

    (91) function_call -> ID LPAREN arguments_opt . RPAREN

    RPAREN          shift and go to state 108


state 75

    (92) arguments_opt -> arguments .
    (94) arguments -> arguments . COMMA expression

    RPAREN          reduce using rule 92 (arguments_opt -> arguments .)
    COMMA           shift and go to state 109


state 76

    (93) arguments -> empty .

    COMMA           reduce using rule 93 (arguments -> empty .)
    RPAREN          reduce using rule 93 (arguments -> empty .)


state 77

    (95) arguments -> expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    COMMA           reduce using rule 95 (arguments -> expression .)
    RPAREN          reduce using rule 95 (arguments -> expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60


state 78

    (51) var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .

    FUNC            reduce using rule 51 (var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .)
    VAR             reduce using rule 51 (var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .)
    ID              reduce using rule 51 (var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .)
    $end            reduce using rule 51 (var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .)
    CONTINUE        reduce using rule 51 (var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .)
    BREAK           reduce using rule 51 (var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .)
    IF              reduce using rule 51 (var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .)
    FOR             reduce using rule 51 (var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .)
    SWITCH          reduce using rule 51 (var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .)
    RETURN          reduce using rule 51 (var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .)
    NOT             reduce using rule 51 (var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .)
    MINUS           reduce using rule 51 (var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .)
    LPAREN          reduce using rule 51 (var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .)
    NUMBER_LITERAL  reduce using rule 51 (var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .)
    STRING_LITERAL  reduce using rule 51 (var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .)
    BOOLEAN_LITERAL reduce using rule 51 (var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .)
    RBRACE          reduce using rule 51 (var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .)
    DEFAULT         reduce using rule 51 (var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .)
    CASE            reduce using rule 51 (var_declaration -> ID WALRUS array_type array_initializer SEMICOLON .)


state 79

    (56) array_type -> array_type LBRACKET NUMBER_LITERAL . RBRACKET

    RBRACKET        shift and go to state 110


state 80

    (58) array_type -> array_type LBRACKET RBRACKET .

    LBRACKET        reduce using rule 58 (array_type -> array_type LBRACKET RBRACKET .)
    LBRACE          reduce using rule 58 (array_type -> array_type LBRACKET RBRACKET .)
    EQUAL           reduce using rule 58 (array_type -> array_type LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 58 (array_type -> array_type LBRACKET RBRACKET .)


state 81

    (59) array_initializer -> LBRACE RBRACE .

    SEMICOLON       reduce using rule 59 (array_initializer -> LBRACE RBRACE .)
    RBRACE          reduce using rule 59 (array_initializer -> LBRACE RBRACE .)
    COMMA           reduce using rule 59 (array_initializer -> LBRACE RBRACE .)


state 82

    (60) array_initializer -> LBRACE expression_list . RBRACE
    (96) expression_list -> expression_list . COMMA expression

    RBRACE          shift and go to state 111
    COMMA           shift and go to state 112


state 83

    (61) array_initializer -> LBRACE nested_initializer_list . RBRACE
    (63) nested_initializer_list -> nested_initializer_list . COMMA array_initializer

    RBRACE          shift and go to state 113
    COMMA           shift and go to state 114


state 84

    (97) expression_list -> expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    RBRACE          reduce using rule 97 (expression_list -> expression .)
    COMMA           reduce using rule 97 (expression_list -> expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60


state 85

    (62) nested_initializer_list -> array_initializer .

    RBRACE          reduce using rule 62 (nested_initializer_list -> array_initializer .)
    COMMA           reduce using rule 62 (nested_initializer_list -> array_initializer .)


state 86

    (69) expression -> expression PLUS expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       reduce using rule 69 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 69 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 69 (expression -> expression PLUS expression .)
    EQUALITY        reduce using rule 69 (expression -> expression PLUS expression .)
    NOTEQUAL        reduce using rule 69 (expression -> expression PLUS expression .)
    GREATER         reduce using rule 69 (expression -> expression PLUS expression .)
    LESS            reduce using rule 69 (expression -> expression PLUS expression .)
    GREATEROREQUAL  reduce using rule 69 (expression -> expression PLUS expression .)
    LESSOREQUAL     reduce using rule 69 (expression -> expression PLUS expression .)
    CONDITIONALAND  reduce using rule 69 (expression -> expression PLUS expression .)
    CONDITIONALOR   reduce using rule 69 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 69 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 69 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 69 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 69 (expression -> expression PLUS expression .)
    LBRACE          reduce using rule 69 (expression -> expression PLUS expression .)
    COLON           reduce using rule 69 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52

  ! TIMES           [ reduce using rule 69 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 69 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 69 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! EQUALITY        [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATER         [ shift and go to state 55 ]
  ! LESS            [ shift and go to state 56 ]
  ! GREATEROREQUAL  [ shift and go to state 57 ]
  ! LESSOREQUAL     [ shift and go to state 58 ]
  ! CONDITIONALAND  [ shift and go to state 59 ]
  ! CONDITIONALOR   [ shift and go to state 60 ]


state 87

    (70) expression -> expression MINUS expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       reduce using rule 70 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 70 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 70 (expression -> expression MINUS expression .)
    EQUALITY        reduce using rule 70 (expression -> expression MINUS expression .)
    NOTEQUAL        reduce using rule 70 (expression -> expression MINUS expression .)
    GREATER         reduce using rule 70 (expression -> expression MINUS expression .)
    LESS            reduce using rule 70 (expression -> expression MINUS expression .)
    GREATEROREQUAL  reduce using rule 70 (expression -> expression MINUS expression .)
    LESSOREQUAL     reduce using rule 70 (expression -> expression MINUS expression .)
    CONDITIONALAND  reduce using rule 70 (expression -> expression MINUS expression .)
    CONDITIONALOR   reduce using rule 70 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 70 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 70 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 70 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 70 (expression -> expression MINUS expression .)
    LBRACE          reduce using rule 70 (expression -> expression MINUS expression .)
    COLON           reduce using rule 70 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52

  ! TIMES           [ reduce using rule 70 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 70 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 70 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! EQUALITY        [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATER         [ shift and go to state 55 ]
  ! LESS            [ shift and go to state 56 ]
  ! GREATEROREQUAL  [ shift and go to state 57 ]
  ! LESSOREQUAL     [ shift and go to state 58 ]
  ! CONDITIONALAND  [ shift and go to state 59 ]
  ! CONDITIONALOR   [ shift and go to state 60 ]


state 88

    (71) expression -> expression TIMES expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       reduce using rule 71 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 71 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 71 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 71 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 71 (expression -> expression TIMES expression .)
    MODULO          reduce using rule 71 (expression -> expression TIMES expression .)
    EQUALITY        reduce using rule 71 (expression -> expression TIMES expression .)
    NOTEQUAL        reduce using rule 71 (expression -> expression TIMES expression .)
    GREATER         reduce using rule 71 (expression -> expression TIMES expression .)
    LESS            reduce using rule 71 (expression -> expression TIMES expression .)
    GREATEROREQUAL  reduce using rule 71 (expression -> expression TIMES expression .)
    LESSOREQUAL     reduce using rule 71 (expression -> expression TIMES expression .)
    CONDITIONALAND  reduce using rule 71 (expression -> expression TIMES expression .)
    CONDITIONALOR   reduce using rule 71 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 71 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 71 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 71 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 71 (expression -> expression TIMES expression .)
    LBRACE          reduce using rule 71 (expression -> expression TIMES expression .)
    COLON           reduce using rule 71 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MODULO          [ shift and go to state 52 ]
  ! EQUALITY        [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATER         [ shift and go to state 55 ]
  ! LESS            [ shift and go to state 56 ]
  ! GREATEROREQUAL  [ shift and go to state 57 ]
  ! LESSOREQUAL     [ shift and go to state 58 ]
  ! CONDITIONALAND  [ shift and go to state 59 ]
  ! CONDITIONALOR   [ shift and go to state 60 ]


state 89

    (72) expression -> expression DIVIDE expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       reduce using rule 72 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 72 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 72 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 72 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 72 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 72 (expression -> expression DIVIDE expression .)
    EQUALITY        reduce using rule 72 (expression -> expression DIVIDE expression .)
    NOTEQUAL        reduce using rule 72 (expression -> expression DIVIDE expression .)
    GREATER         reduce using rule 72 (expression -> expression DIVIDE expression .)
    LESS            reduce using rule 72 (expression -> expression DIVIDE expression .)
    GREATEROREQUAL  reduce using rule 72 (expression -> expression DIVIDE expression .)
    LESSOREQUAL     reduce using rule 72 (expression -> expression DIVIDE expression .)
    CONDITIONALAND  reduce using rule 72 (expression -> expression DIVIDE expression .)
    CONDITIONALOR   reduce using rule 72 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 72 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 72 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 72 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 72 (expression -> expression DIVIDE expression .)
    LBRACE          reduce using rule 72 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 72 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MODULO          [ shift and go to state 52 ]
  ! EQUALITY        [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATER         [ shift and go to state 55 ]
  ! LESS            [ shift and go to state 56 ]
  ! GREATEROREQUAL  [ shift and go to state 57 ]
  ! LESSOREQUAL     [ shift and go to state 58 ]
  ! CONDITIONALAND  [ shift and go to state 59 ]
  ! CONDITIONALOR   [ shift and go to state 60 ]


state 90

    (73) expression -> expression MODULO expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       reduce using rule 73 (expression -> expression MODULO expression .)
    PLUS            reduce using rule 73 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 73 (expression -> expression MODULO expression .)
    TIMES           reduce using rule 73 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 73 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 73 (expression -> expression MODULO expression .)
    EQUALITY        reduce using rule 73 (expression -> expression MODULO expression .)
    NOTEQUAL        reduce using rule 73 (expression -> expression MODULO expression .)
    GREATER         reduce using rule 73 (expression -> expression MODULO expression .)
    LESS            reduce using rule 73 (expression -> expression MODULO expression .)
    GREATEROREQUAL  reduce using rule 73 (expression -> expression MODULO expression .)
    LESSOREQUAL     reduce using rule 73 (expression -> expression MODULO expression .)
    CONDITIONALAND  reduce using rule 73 (expression -> expression MODULO expression .)
    CONDITIONALOR   reduce using rule 73 (expression -> expression MODULO expression .)
    RPAREN          reduce using rule 73 (expression -> expression MODULO expression .)
    RBRACKET        reduce using rule 73 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 73 (expression -> expression MODULO expression .)
    RBRACE          reduce using rule 73 (expression -> expression MODULO expression .)
    LBRACE          reduce using rule 73 (expression -> expression MODULO expression .)
    COLON           reduce using rule 73 (expression -> expression MODULO expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MODULO          [ shift and go to state 52 ]
  ! EQUALITY        [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATER         [ shift and go to state 55 ]
  ! LESS            [ shift and go to state 56 ]
  ! GREATEROREQUAL  [ shift and go to state 57 ]
  ! LESSOREQUAL     [ shift and go to state 58 ]
  ! CONDITIONALAND  [ shift and go to state 59 ]
  ! CONDITIONALOR   [ shift and go to state 60 ]


state 91

    (74) expression -> expression EQUALITY expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       reduce using rule 74 (expression -> expression EQUALITY expression .)
    EQUALITY        reduce using rule 74 (expression -> expression EQUALITY expression .)
    NOTEQUAL        reduce using rule 74 (expression -> expression EQUALITY expression .)
    CONDITIONALAND  reduce using rule 74 (expression -> expression EQUALITY expression .)
    CONDITIONALOR   reduce using rule 74 (expression -> expression EQUALITY expression .)
    RPAREN          reduce using rule 74 (expression -> expression EQUALITY expression .)
    RBRACKET        reduce using rule 74 (expression -> expression EQUALITY expression .)
    COMMA           reduce using rule 74 (expression -> expression EQUALITY expression .)
    RBRACE          reduce using rule 74 (expression -> expression EQUALITY expression .)
    LBRACE          reduce using rule 74 (expression -> expression EQUALITY expression .)
    COLON           reduce using rule 74 (expression -> expression EQUALITY expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58

  ! PLUS            [ reduce using rule 74 (expression -> expression EQUALITY expression .) ]
  ! MINUS           [ reduce using rule 74 (expression -> expression EQUALITY expression .) ]
  ! TIMES           [ reduce using rule 74 (expression -> expression EQUALITY expression .) ]
  ! DIVIDE          [ reduce using rule 74 (expression -> expression EQUALITY expression .) ]
  ! MODULO          [ reduce using rule 74 (expression -> expression EQUALITY expression .) ]
  ! GREATER         [ reduce using rule 74 (expression -> expression EQUALITY expression .) ]
  ! LESS            [ reduce using rule 74 (expression -> expression EQUALITY expression .) ]
  ! GREATEROREQUAL  [ reduce using rule 74 (expression -> expression EQUALITY expression .) ]
  ! LESSOREQUAL     [ reduce using rule 74 (expression -> expression EQUALITY expression .) ]
  ! EQUALITY        [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! CONDITIONALAND  [ shift and go to state 59 ]
  ! CONDITIONALOR   [ shift and go to state 60 ]


state 92

    (75) expression -> expression NOTEQUAL expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       reduce using rule 75 (expression -> expression NOTEQUAL expression .)
    EQUALITY        reduce using rule 75 (expression -> expression NOTEQUAL expression .)
    NOTEQUAL        reduce using rule 75 (expression -> expression NOTEQUAL expression .)
    CONDITIONALAND  reduce using rule 75 (expression -> expression NOTEQUAL expression .)
    CONDITIONALOR   reduce using rule 75 (expression -> expression NOTEQUAL expression .)
    RPAREN          reduce using rule 75 (expression -> expression NOTEQUAL expression .)
    RBRACKET        reduce using rule 75 (expression -> expression NOTEQUAL expression .)
    COMMA           reduce using rule 75 (expression -> expression NOTEQUAL expression .)
    RBRACE          reduce using rule 75 (expression -> expression NOTEQUAL expression .)
    LBRACE          reduce using rule 75 (expression -> expression NOTEQUAL expression .)
    COLON           reduce using rule 75 (expression -> expression NOTEQUAL expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58

  ! PLUS            [ reduce using rule 75 (expression -> expression NOTEQUAL expression .) ]
  ! MINUS           [ reduce using rule 75 (expression -> expression NOTEQUAL expression .) ]
  ! TIMES           [ reduce using rule 75 (expression -> expression NOTEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 75 (expression -> expression NOTEQUAL expression .) ]
  ! MODULO          [ reduce using rule 75 (expression -> expression NOTEQUAL expression .) ]
  ! GREATER         [ reduce using rule 75 (expression -> expression NOTEQUAL expression .) ]
  ! LESS            [ reduce using rule 75 (expression -> expression NOTEQUAL expression .) ]
  ! GREATEROREQUAL  [ reduce using rule 75 (expression -> expression NOTEQUAL expression .) ]
  ! LESSOREQUAL     [ reduce using rule 75 (expression -> expression NOTEQUAL expression .) ]
  ! EQUALITY        [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! CONDITIONALAND  [ shift and go to state 59 ]
  ! CONDITIONALOR   [ shift and go to state 60 ]


state 93

    (76) expression -> expression GREATER expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       reduce using rule 76 (expression -> expression GREATER expression .)
    EQUALITY        reduce using rule 76 (expression -> expression GREATER expression .)
    NOTEQUAL        reduce using rule 76 (expression -> expression GREATER expression .)
    GREATER         reduce using rule 76 (expression -> expression GREATER expression .)
    LESS            reduce using rule 76 (expression -> expression GREATER expression .)
    GREATEROREQUAL  reduce using rule 76 (expression -> expression GREATER expression .)
    LESSOREQUAL     reduce using rule 76 (expression -> expression GREATER expression .)
    CONDITIONALAND  reduce using rule 76 (expression -> expression GREATER expression .)
    CONDITIONALOR   reduce using rule 76 (expression -> expression GREATER expression .)
    RPAREN          reduce using rule 76 (expression -> expression GREATER expression .)
    RBRACKET        reduce using rule 76 (expression -> expression GREATER expression .)
    COMMA           reduce using rule 76 (expression -> expression GREATER expression .)
    RBRACE          reduce using rule 76 (expression -> expression GREATER expression .)
    LBRACE          reduce using rule 76 (expression -> expression GREATER expression .)
    COLON           reduce using rule 76 (expression -> expression GREATER expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52

  ! PLUS            [ reduce using rule 76 (expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 76 (expression -> expression GREATER expression .) ]
  ! TIMES           [ reduce using rule 76 (expression -> expression GREATER expression .) ]
  ! DIVIDE          [ reduce using rule 76 (expression -> expression GREATER expression .) ]
  ! MODULO          [ reduce using rule 76 (expression -> expression GREATER expression .) ]
  ! EQUALITY        [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATER         [ shift and go to state 55 ]
  ! LESS            [ shift and go to state 56 ]
  ! GREATEROREQUAL  [ shift and go to state 57 ]
  ! LESSOREQUAL     [ shift and go to state 58 ]
  ! CONDITIONALAND  [ shift and go to state 59 ]
  ! CONDITIONALOR   [ shift and go to state 60 ]


state 94

    (77) expression -> expression LESS expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       reduce using rule 77 (expression -> expression LESS expression .)
    EQUALITY        reduce using rule 77 (expression -> expression LESS expression .)
    NOTEQUAL        reduce using rule 77 (expression -> expression LESS expression .)
    GREATER         reduce using rule 77 (expression -> expression LESS expression .)
    LESS            reduce using rule 77 (expression -> expression LESS expression .)
    GREATEROREQUAL  reduce using rule 77 (expression -> expression LESS expression .)
    LESSOREQUAL     reduce using rule 77 (expression -> expression LESS expression .)
    CONDITIONALAND  reduce using rule 77 (expression -> expression LESS expression .)
    CONDITIONALOR   reduce using rule 77 (expression -> expression LESS expression .)
    RPAREN          reduce using rule 77 (expression -> expression LESS expression .)
    RBRACKET        reduce using rule 77 (expression -> expression LESS expression .)
    COMMA           reduce using rule 77 (expression -> expression LESS expression .)
    RBRACE          reduce using rule 77 (expression -> expression LESS expression .)
    LBRACE          reduce using rule 77 (expression -> expression LESS expression .)
    COLON           reduce using rule 77 (expression -> expression LESS expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52

  ! PLUS            [ reduce using rule 77 (expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 77 (expression -> expression LESS expression .) ]
  ! TIMES           [ reduce using rule 77 (expression -> expression LESS expression .) ]
  ! DIVIDE          [ reduce using rule 77 (expression -> expression LESS expression .) ]
  ! MODULO          [ reduce using rule 77 (expression -> expression LESS expression .) ]
  ! EQUALITY        [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATER         [ shift and go to state 55 ]
  ! LESS            [ shift and go to state 56 ]
  ! GREATEROREQUAL  [ shift and go to state 57 ]
  ! LESSOREQUAL     [ shift and go to state 58 ]
  ! CONDITIONALAND  [ shift and go to state 59 ]
  ! CONDITIONALOR   [ shift and go to state 60 ]


state 95

    (78) expression -> expression GREATEROREQUAL expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       reduce using rule 78 (expression -> expression GREATEROREQUAL expression .)
    EQUALITY        reduce using rule 78 (expression -> expression GREATEROREQUAL expression .)
    NOTEQUAL        reduce using rule 78 (expression -> expression GREATEROREQUAL expression .)
    GREATER         reduce using rule 78 (expression -> expression GREATEROREQUAL expression .)
    LESS            reduce using rule 78 (expression -> expression GREATEROREQUAL expression .)
    GREATEROREQUAL  reduce using rule 78 (expression -> expression GREATEROREQUAL expression .)
    LESSOREQUAL     reduce using rule 78 (expression -> expression GREATEROREQUAL expression .)
    CONDITIONALAND  reduce using rule 78 (expression -> expression GREATEROREQUAL expression .)
    CONDITIONALOR   reduce using rule 78 (expression -> expression GREATEROREQUAL expression .)
    RPAREN          reduce using rule 78 (expression -> expression GREATEROREQUAL expression .)
    RBRACKET        reduce using rule 78 (expression -> expression GREATEROREQUAL expression .)
    COMMA           reduce using rule 78 (expression -> expression GREATEROREQUAL expression .)
    RBRACE          reduce using rule 78 (expression -> expression GREATEROREQUAL expression .)
    LBRACE          reduce using rule 78 (expression -> expression GREATEROREQUAL expression .)
    COLON           reduce using rule 78 (expression -> expression GREATEROREQUAL expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52

  ! PLUS            [ reduce using rule 78 (expression -> expression GREATEROREQUAL expression .) ]
  ! MINUS           [ reduce using rule 78 (expression -> expression GREATEROREQUAL expression .) ]
  ! TIMES           [ reduce using rule 78 (expression -> expression GREATEROREQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 78 (expression -> expression GREATEROREQUAL expression .) ]
  ! MODULO          [ reduce using rule 78 (expression -> expression GREATEROREQUAL expression .) ]
  ! EQUALITY        [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATER         [ shift and go to state 55 ]
  ! LESS            [ shift and go to state 56 ]
  ! GREATEROREQUAL  [ shift and go to state 57 ]
  ! LESSOREQUAL     [ shift and go to state 58 ]
  ! CONDITIONALAND  [ shift and go to state 59 ]
  ! CONDITIONALOR   [ shift and go to state 60 ]


state 96

    (79) expression -> expression LESSOREQUAL expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       reduce using rule 79 (expression -> expression LESSOREQUAL expression .)
    EQUALITY        reduce using rule 79 (expression -> expression LESSOREQUAL expression .)
    NOTEQUAL        reduce using rule 79 (expression -> expression LESSOREQUAL expression .)
    GREATER         reduce using rule 79 (expression -> expression LESSOREQUAL expression .)
    LESS            reduce using rule 79 (expression -> expression LESSOREQUAL expression .)
    GREATEROREQUAL  reduce using rule 79 (expression -> expression LESSOREQUAL expression .)
    LESSOREQUAL     reduce using rule 79 (expression -> expression LESSOREQUAL expression .)
    CONDITIONALAND  reduce using rule 79 (expression -> expression LESSOREQUAL expression .)
    CONDITIONALOR   reduce using rule 79 (expression -> expression LESSOREQUAL expression .)
    RPAREN          reduce using rule 79 (expression -> expression LESSOREQUAL expression .)
    RBRACKET        reduce using rule 79 (expression -> expression LESSOREQUAL expression .)
    COMMA           reduce using rule 79 (expression -> expression LESSOREQUAL expression .)
    RBRACE          reduce using rule 79 (expression -> expression LESSOREQUAL expression .)
    LBRACE          reduce using rule 79 (expression -> expression LESSOREQUAL expression .)
    COLON           reduce using rule 79 (expression -> expression LESSOREQUAL expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52

  ! PLUS            [ reduce using rule 79 (expression -> expression LESSOREQUAL expression .) ]
  ! MINUS           [ reduce using rule 79 (expression -> expression LESSOREQUAL expression .) ]
  ! TIMES           [ reduce using rule 79 (expression -> expression LESSOREQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 79 (expression -> expression LESSOREQUAL expression .) ]
  ! MODULO          [ reduce using rule 79 (expression -> expression LESSOREQUAL expression .) ]
  ! EQUALITY        [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATER         [ shift and go to state 55 ]
  ! LESS            [ shift and go to state 56 ]
  ! GREATEROREQUAL  [ shift and go to state 57 ]
  ! LESSOREQUAL     [ shift and go to state 58 ]
  ! CONDITIONALAND  [ shift and go to state 59 ]
  ! CONDITIONALOR   [ shift and go to state 60 ]


state 97

    (80) expression -> expression CONDITIONALAND expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       reduce using rule 80 (expression -> expression CONDITIONALAND expression .)
    CONDITIONALAND  reduce using rule 80 (expression -> expression CONDITIONALAND expression .)
    CONDITIONALOR   reduce using rule 80 (expression -> expression CONDITIONALAND expression .)
    RPAREN          reduce using rule 80 (expression -> expression CONDITIONALAND expression .)
    RBRACKET        reduce using rule 80 (expression -> expression CONDITIONALAND expression .)
    COMMA           reduce using rule 80 (expression -> expression CONDITIONALAND expression .)
    RBRACE          reduce using rule 80 (expression -> expression CONDITIONALAND expression .)
    LBRACE          reduce using rule 80 (expression -> expression CONDITIONALAND expression .)
    COLON           reduce using rule 80 (expression -> expression CONDITIONALAND expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58

  ! PLUS            [ reduce using rule 80 (expression -> expression CONDITIONALAND expression .) ]
  ! MINUS           [ reduce using rule 80 (expression -> expression CONDITIONALAND expression .) ]
  ! TIMES           [ reduce using rule 80 (expression -> expression CONDITIONALAND expression .) ]
  ! DIVIDE          [ reduce using rule 80 (expression -> expression CONDITIONALAND expression .) ]
  ! MODULO          [ reduce using rule 80 (expression -> expression CONDITIONALAND expression .) ]
  ! EQUALITY        [ reduce using rule 80 (expression -> expression CONDITIONALAND expression .) ]
  ! NOTEQUAL        [ reduce using rule 80 (expression -> expression CONDITIONALAND expression .) ]
  ! GREATER         [ reduce using rule 80 (expression -> expression CONDITIONALAND expression .) ]
  ! LESS            [ reduce using rule 80 (expression -> expression CONDITIONALAND expression .) ]
  ! GREATEROREQUAL  [ reduce using rule 80 (expression -> expression CONDITIONALAND expression .) ]
  ! LESSOREQUAL     [ reduce using rule 80 (expression -> expression CONDITIONALAND expression .) ]
  ! CONDITIONALAND  [ shift and go to state 59 ]
  ! CONDITIONALOR   [ shift and go to state 60 ]


state 98

    (81) expression -> expression CONDITIONALOR expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       reduce using rule 81 (expression -> expression CONDITIONALOR expression .)
    CONDITIONALOR   reduce using rule 81 (expression -> expression CONDITIONALOR expression .)
    RPAREN          reduce using rule 81 (expression -> expression CONDITIONALOR expression .)
    RBRACKET        reduce using rule 81 (expression -> expression CONDITIONALOR expression .)
    COMMA           reduce using rule 81 (expression -> expression CONDITIONALOR expression .)
    RBRACE          reduce using rule 81 (expression -> expression CONDITIONALOR expression .)
    LBRACE          reduce using rule 81 (expression -> expression CONDITIONALOR expression .)
    COLON           reduce using rule 81 (expression -> expression CONDITIONALOR expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59

  ! PLUS            [ reduce using rule 81 (expression -> expression CONDITIONALOR expression .) ]
  ! MINUS           [ reduce using rule 81 (expression -> expression CONDITIONALOR expression .) ]
  ! TIMES           [ reduce using rule 81 (expression -> expression CONDITIONALOR expression .) ]
  ! DIVIDE          [ reduce using rule 81 (expression -> expression CONDITIONALOR expression .) ]
  ! MODULO          [ reduce using rule 81 (expression -> expression CONDITIONALOR expression .) ]
  ! EQUALITY        [ reduce using rule 81 (expression -> expression CONDITIONALOR expression .) ]
  ! NOTEQUAL        [ reduce using rule 81 (expression -> expression CONDITIONALOR expression .) ]
  ! GREATER         [ reduce using rule 81 (expression -> expression CONDITIONALOR expression .) ]
  ! LESS            [ reduce using rule 81 (expression -> expression CONDITIONALOR expression .) ]
  ! GREATEROREQUAL  [ reduce using rule 81 (expression -> expression CONDITIONALOR expression .) ]
  ! LESSOREQUAL     [ reduce using rule 81 (expression -> expression CONDITIONALOR expression .) ]
  ! CONDITIONALAND  [ reduce using rule 81 (expression -> expression CONDITIONALOR expression .) ]
  ! CONDITIONALOR   [ shift and go to state 60 ]


state 99

    (55) array_type -> type LBRACKET NUMBER_LITERAL . RBRACKET

    RBRACKET        shift and go to state 115


state 100

    (57) array_type -> type LBRACKET RBRACKET .

    LBRACKET        reduce using rule 57 (array_type -> type LBRACKET RBRACKET .)
    LBRACE          reduce using rule 57 (array_type -> type LBRACKET RBRACKET .)
    EQUAL           reduce using rule 57 (array_type -> type LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 57 (array_type -> type LBRACKET RBRACKET .)


state 101

    (84) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 84 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 84 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 84 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 84 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 84 (expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 84 (expression -> LPAREN expression RPAREN .)
    EQUALITY        reduce using rule 84 (expression -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 84 (expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 84 (expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 84 (expression -> LPAREN expression RPAREN .)
    GREATEROREQUAL  reduce using rule 84 (expression -> LPAREN expression RPAREN .)
    LESSOREQUAL     reduce using rule 84 (expression -> LPAREN expression RPAREN .)
    CONDITIONALAND  reduce using rule 84 (expression -> LPAREN expression RPAREN .)
    CONDITIONALOR   reduce using rule 84 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 84 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 84 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 84 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 84 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 84 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 84 (expression -> LPAREN expression RPAREN .)


state 102

    (65) array_access -> array_access LBRACKET expression . RBRACKET
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    RBRACKET        shift and go to state 116
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60


state 103

    (49) var_declaration -> VAR ID array_type EQUAL array_initializer . SEMICOLON

    SEMICOLON       shift and go to state 117


state 104

    (52) var_declaration -> VAR ID type EQUAL expression . SEMICOLON
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       shift and go to state 118
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60


state 105

    (7) function_declaration -> FUNC ID LPAREN parameters_opt RPAREN type . block
    (13) block -> . LBRACE block_contents RBRACE
    (14) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 120

    block                          shift and go to state 119

state 106

    (10) parameters -> parameters COMMA parameter .

    COMMA           reduce using rule 10 (parameters -> parameters COMMA parameter .)
    RPAREN          reduce using rule 10 (parameters -> parameters COMMA parameter .)


state 107

    (64) array_access -> ID LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    EQUALITY        reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    NOTEQUAL        reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    GREATEROREQUAL  reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    LESSOREQUAL     reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    CONDITIONALAND  reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    CONDITIONALOR   reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    COLON           reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 64 (array_access -> ID LBRACKET expression RBRACKET .)


state 108

    (91) function_call -> ID LPAREN arguments_opt RPAREN .

    SEMICOLON       reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)
    PLUS            reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)
    MINUS           reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)
    TIMES           reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)
    DIVIDE          reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)
    MODULO          reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)
    EQUALITY        reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)
    NOTEQUAL        reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)
    GREATER         reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)
    LESS            reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)
    GREATEROREQUAL  reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)
    LESSOREQUAL     reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)
    CONDITIONALAND  reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)
    CONDITIONALOR   reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)
    RPAREN          reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)
    RBRACKET        reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)
    COMMA           reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)
    RBRACE          reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)
    LBRACE          reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)
    COLON           reduce using rule 91 (function_call -> ID LPAREN arguments_opt RPAREN .)


state 109

    (94) arguments -> arguments COMMA . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 121
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 110

    (56) array_type -> array_type LBRACKET NUMBER_LITERAL RBRACKET .

    LBRACKET        reduce using rule 56 (array_type -> array_type LBRACKET NUMBER_LITERAL RBRACKET .)
    LBRACE          reduce using rule 56 (array_type -> array_type LBRACKET NUMBER_LITERAL RBRACKET .)
    EQUAL           reduce using rule 56 (array_type -> array_type LBRACKET NUMBER_LITERAL RBRACKET .)
    SEMICOLON       reduce using rule 56 (array_type -> array_type LBRACKET NUMBER_LITERAL RBRACKET .)


state 111

    (60) array_initializer -> LBRACE expression_list RBRACE .

    SEMICOLON       reduce using rule 60 (array_initializer -> LBRACE expression_list RBRACE .)
    RBRACE          reduce using rule 60 (array_initializer -> LBRACE expression_list RBRACE .)
    COMMA           reduce using rule 60 (array_initializer -> LBRACE expression_list RBRACE .)


state 112

    (96) expression_list -> expression_list COMMA . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 122
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 113

    (61) array_initializer -> LBRACE nested_initializer_list RBRACE .

    SEMICOLON       reduce using rule 61 (array_initializer -> LBRACE nested_initializer_list RBRACE .)
    RBRACE          reduce using rule 61 (array_initializer -> LBRACE nested_initializer_list RBRACE .)
    COMMA           reduce using rule 61 (array_initializer -> LBRACE nested_initializer_list RBRACE .)


state 114

    (63) nested_initializer_list -> nested_initializer_list COMMA . array_initializer
    (59) array_initializer -> . LBRACE RBRACE
    (60) array_initializer -> . LBRACE expression_list RBRACE
    (61) array_initializer -> . LBRACE nested_initializer_list RBRACE

    LBRACE          shift and go to state 46

    array_initializer              shift and go to state 123

state 115

    (55) array_type -> type LBRACKET NUMBER_LITERAL RBRACKET .

    LBRACKET        reduce using rule 55 (array_type -> type LBRACKET NUMBER_LITERAL RBRACKET .)
    LBRACE          reduce using rule 55 (array_type -> type LBRACKET NUMBER_LITERAL RBRACKET .)
    EQUAL           reduce using rule 55 (array_type -> type LBRACKET NUMBER_LITERAL RBRACKET .)
    SEMICOLON       reduce using rule 55 (array_type -> type LBRACKET NUMBER_LITERAL RBRACKET .)


state 116

    (65) array_access -> array_access LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    EQUALITY        reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    NOTEQUAL        reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    LESS            reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    GREATEROREQUAL  reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    LESSOREQUAL     reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    CONDITIONALAND  reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    CONDITIONALOR   reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    COLON           reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 65 (array_access -> array_access LBRACKET expression RBRACKET .)


state 117

    (49) var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .

    FUNC            reduce using rule 49 (var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .)
    VAR             reduce using rule 49 (var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .)
    ID              reduce using rule 49 (var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .)
    $end            reduce using rule 49 (var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .)
    CONTINUE        reduce using rule 49 (var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .)
    BREAK           reduce using rule 49 (var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .)
    IF              reduce using rule 49 (var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .)
    FOR             reduce using rule 49 (var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .)
    SWITCH          reduce using rule 49 (var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .)
    RETURN          reduce using rule 49 (var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .)
    NOT             reduce using rule 49 (var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .)
    MINUS           reduce using rule 49 (var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .)
    LPAREN          reduce using rule 49 (var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .)
    NUMBER_LITERAL  reduce using rule 49 (var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .)
    STRING_LITERAL  reduce using rule 49 (var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .)
    BOOLEAN_LITERAL reduce using rule 49 (var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .)
    RBRACE          reduce using rule 49 (var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .)
    DEFAULT         reduce using rule 49 (var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .)
    CASE            reduce using rule 49 (var_declaration -> VAR ID array_type EQUAL array_initializer SEMICOLON .)


state 118

    (52) var_declaration -> VAR ID type EQUAL expression SEMICOLON .

    FUNC            reduce using rule 52 (var_declaration -> VAR ID type EQUAL expression SEMICOLON .)
    VAR             reduce using rule 52 (var_declaration -> VAR ID type EQUAL expression SEMICOLON .)
    ID              reduce using rule 52 (var_declaration -> VAR ID type EQUAL expression SEMICOLON .)
    $end            reduce using rule 52 (var_declaration -> VAR ID type EQUAL expression SEMICOLON .)
    CONTINUE        reduce using rule 52 (var_declaration -> VAR ID type EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 52 (var_declaration -> VAR ID type EQUAL expression SEMICOLON .)
    IF              reduce using rule 52 (var_declaration -> VAR ID type EQUAL expression SEMICOLON .)
    FOR             reduce using rule 52 (var_declaration -> VAR ID type EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 52 (var_declaration -> VAR ID type EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 52 (var_declaration -> VAR ID type EQUAL expression SEMICOLON .)
    NOT             reduce using rule 52 (var_declaration -> VAR ID type EQUAL expression SEMICOLON .)
    MINUS           reduce using rule 52 (var_declaration -> VAR ID type EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 52 (var_declaration -> VAR ID type EQUAL expression SEMICOLON .)
    NUMBER_LITERAL  reduce using rule 52 (var_declaration -> VAR ID type EQUAL expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 52 (var_declaration -> VAR ID type EQUAL expression SEMICOLON .)
    BOOLEAN_LITERAL reduce using rule 52 (var_declaration -> VAR ID type EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 52 (var_declaration -> VAR ID type EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 52 (var_declaration -> VAR ID type EQUAL expression SEMICOLON .)
    CASE            reduce using rule 52 (var_declaration -> VAR ID type EQUAL expression SEMICOLON .)


state 119

    (7) function_declaration -> FUNC ID LPAREN parameters_opt RPAREN type block .

    FUNC            reduce using rule 7 (function_declaration -> FUNC ID LPAREN parameters_opt RPAREN type block .)
    VAR             reduce using rule 7 (function_declaration -> FUNC ID LPAREN parameters_opt RPAREN type block .)
    ID              reduce using rule 7 (function_declaration -> FUNC ID LPAREN parameters_opt RPAREN type block .)
    $end            reduce using rule 7 (function_declaration -> FUNC ID LPAREN parameters_opt RPAREN type block .)


state 120

    (13) block -> LBRACE . block_contents RBRACE
    (14) block -> LBRACE . RBRACE
    (15) block_contents -> . statements
    (16) statements -> . statements statement
    (17) statements -> . statement
    (18) statement -> . var_declaration
    (19) statement -> . short_var_declaration
    (20) statement -> . expression_statement
    (21) statement -> . if_statement
    (22) statement -> . for_statement
    (23) statement -> . switch_statement
    (24) statement -> . return_statement
    (25) statement -> . assignment
    (26) statement -> . CONTINUE SEMICOLON
    (27) statement -> . BREAK SEMICOLON
    (49) var_declaration -> . VAR ID array_type EQUAL array_initializer SEMICOLON
    (50) var_declaration -> . VAR ID array_type SEMICOLON
    (51) var_declaration -> . ID WALRUS array_type array_initializer SEMICOLON
    (52) var_declaration -> . VAR ID type EQUAL expression SEMICOLON
    (53) var_declaration -> . VAR ID type SEMICOLON
    (54) short_var_declaration -> . ID WALRUS expression SEMICOLON
    (28) expression_statement -> . expression SEMICOLON
    (29) if_statement -> . IF expression block else_clause
    (33) for_statement -> . FOR for_init SEMICOLON expression SEMICOLON for_post block
    (34) for_statement -> . FOR expression block
    (35) for_statement -> . FOR block
    (40) switch_statement -> . SWITCH expression LBRACE switch_cases default_clause RBRACE
    (46) return_statement -> . RETURN expression_opt SEMICOLON
    (66) assignment -> . ID EQUAL expression SEMICOLON
    (67) assignment -> . array_access EQUAL expression SEMICOLON
    (68) assignment -> . ID EQUAL array_initializer SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    RBRACE          shift and go to state 125
    CONTINUE        shift and go to state 136
    BREAK           shift and go to state 137
    VAR             shift and go to state 9
    ID              shift and go to state 138
    IF              shift and go to state 140
    FOR             shift and go to state 141
    SWITCH          shift and go to state 142
    RETURN          shift and go to state 143
    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    block_contents                 shift and go to state 124
    statements                     shift and go to state 126
    statement                      shift and go to state 127
    var_declaration                shift and go to state 128
    short_var_declaration          shift and go to state 129
    expression_statement           shift and go to state 130
    if_statement                   shift and go to state 131
    for_statement                  shift and go to state 132
    switch_statement               shift and go to state 133
    return_statement               shift and go to state 134
    assignment                     shift and go to state 135
    expression                     shift and go to state 139
    array_access                   shift and go to state 144
    literal                        shift and go to state 23
    function_call                  shift and go to state 25

state 121

    (94) arguments -> arguments COMMA expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    COMMA           reduce using rule 94 (arguments -> arguments COMMA expression .)
    RPAREN          reduce using rule 94 (arguments -> arguments COMMA expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60


state 122

    (96) expression_list -> expression_list COMMA expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    RBRACE          reduce using rule 96 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 96 (expression_list -> expression_list COMMA expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60


state 123

    (63) nested_initializer_list -> nested_initializer_list COMMA array_initializer .

    RBRACE          reduce using rule 63 (nested_initializer_list -> nested_initializer_list COMMA array_initializer .)
    COMMA           reduce using rule 63 (nested_initializer_list -> nested_initializer_list COMMA array_initializer .)


state 124

    (13) block -> LBRACE block_contents . RBRACE

    RBRACE          shift and go to state 145


state 125

    (14) block -> LBRACE RBRACE .

    FUNC            reduce using rule 14 (block -> LBRACE RBRACE .)
    VAR             reduce using rule 14 (block -> LBRACE RBRACE .)
    ID              reduce using rule 14 (block -> LBRACE RBRACE .)
    $end            reduce using rule 14 (block -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 14 (block -> LBRACE RBRACE .)
    BREAK           reduce using rule 14 (block -> LBRACE RBRACE .)
    IF              reduce using rule 14 (block -> LBRACE RBRACE .)
    FOR             reduce using rule 14 (block -> LBRACE RBRACE .)
    SWITCH          reduce using rule 14 (block -> LBRACE RBRACE .)
    RETURN          reduce using rule 14 (block -> LBRACE RBRACE .)
    NOT             reduce using rule 14 (block -> LBRACE RBRACE .)
    MINUS           reduce using rule 14 (block -> LBRACE RBRACE .)
    LPAREN          reduce using rule 14 (block -> LBRACE RBRACE .)
    NUMBER_LITERAL  reduce using rule 14 (block -> LBRACE RBRACE .)
    STRING_LITERAL  reduce using rule 14 (block -> LBRACE RBRACE .)
    BOOLEAN_LITERAL reduce using rule 14 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 14 (block -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 14 (block -> LBRACE RBRACE .)
    CASE            reduce using rule 14 (block -> LBRACE RBRACE .)
    ELSE            reduce using rule 14 (block -> LBRACE RBRACE .)


state 126

    (15) block_contents -> statements .
    (16) statements -> statements . statement
    (18) statement -> . var_declaration
    (19) statement -> . short_var_declaration
    (20) statement -> . expression_statement
    (21) statement -> . if_statement
    (22) statement -> . for_statement
    (23) statement -> . switch_statement
    (24) statement -> . return_statement
    (25) statement -> . assignment
    (26) statement -> . CONTINUE SEMICOLON
    (27) statement -> . BREAK SEMICOLON
    (49) var_declaration -> . VAR ID array_type EQUAL array_initializer SEMICOLON
    (50) var_declaration -> . VAR ID array_type SEMICOLON
    (51) var_declaration -> . ID WALRUS array_type array_initializer SEMICOLON
    (52) var_declaration -> . VAR ID type EQUAL expression SEMICOLON
    (53) var_declaration -> . VAR ID type SEMICOLON
    (54) short_var_declaration -> . ID WALRUS expression SEMICOLON
    (28) expression_statement -> . expression SEMICOLON
    (29) if_statement -> . IF expression block else_clause
    (33) for_statement -> . FOR for_init SEMICOLON expression SEMICOLON for_post block
    (34) for_statement -> . FOR expression block
    (35) for_statement -> . FOR block
    (40) switch_statement -> . SWITCH expression LBRACE switch_cases default_clause RBRACE
    (46) return_statement -> . RETURN expression_opt SEMICOLON
    (66) assignment -> . ID EQUAL expression SEMICOLON
    (67) assignment -> . array_access EQUAL expression SEMICOLON
    (68) assignment -> . ID EQUAL array_initializer SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    RBRACE          reduce using rule 15 (block_contents -> statements .)
    CONTINUE        shift and go to state 136
    BREAK           shift and go to state 137
    VAR             shift and go to state 9
    ID              shift and go to state 138
    IF              shift and go to state 140
    FOR             shift and go to state 141
    SWITCH          shift and go to state 142
    RETURN          shift and go to state 143
    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    statement                      shift and go to state 146
    var_declaration                shift and go to state 128
    short_var_declaration          shift and go to state 129
    expression_statement           shift and go to state 130
    if_statement                   shift and go to state 131
    for_statement                  shift and go to state 132
    switch_statement               shift and go to state 133
    return_statement               shift and go to state 134
    assignment                     shift and go to state 135
    expression                     shift and go to state 139
    array_access                   shift and go to state 144
    literal                        shift and go to state 23
    function_call                  shift and go to state 25

state 127

    (17) statements -> statement .

    CONTINUE        reduce using rule 17 (statements -> statement .)
    BREAK           reduce using rule 17 (statements -> statement .)
    VAR             reduce using rule 17 (statements -> statement .)
    ID              reduce using rule 17 (statements -> statement .)
    IF              reduce using rule 17 (statements -> statement .)
    FOR             reduce using rule 17 (statements -> statement .)
    SWITCH          reduce using rule 17 (statements -> statement .)
    RETURN          reduce using rule 17 (statements -> statement .)
    NOT             reduce using rule 17 (statements -> statement .)
    MINUS           reduce using rule 17 (statements -> statement .)
    LPAREN          reduce using rule 17 (statements -> statement .)
    NUMBER_LITERAL  reduce using rule 17 (statements -> statement .)
    STRING_LITERAL  reduce using rule 17 (statements -> statement .)
    BOOLEAN_LITERAL reduce using rule 17 (statements -> statement .)
    RBRACE          reduce using rule 17 (statements -> statement .)
    DEFAULT         reduce using rule 17 (statements -> statement .)
    CASE            reduce using rule 17 (statements -> statement .)


state 128

    (18) statement -> var_declaration .

    CONTINUE        reduce using rule 18 (statement -> var_declaration .)
    BREAK           reduce using rule 18 (statement -> var_declaration .)
    VAR             reduce using rule 18 (statement -> var_declaration .)
    ID              reduce using rule 18 (statement -> var_declaration .)
    IF              reduce using rule 18 (statement -> var_declaration .)
    FOR             reduce using rule 18 (statement -> var_declaration .)
    SWITCH          reduce using rule 18 (statement -> var_declaration .)
    RETURN          reduce using rule 18 (statement -> var_declaration .)
    NOT             reduce using rule 18 (statement -> var_declaration .)
    MINUS           reduce using rule 18 (statement -> var_declaration .)
    LPAREN          reduce using rule 18 (statement -> var_declaration .)
    NUMBER_LITERAL  reduce using rule 18 (statement -> var_declaration .)
    STRING_LITERAL  reduce using rule 18 (statement -> var_declaration .)
    BOOLEAN_LITERAL reduce using rule 18 (statement -> var_declaration .)
    RBRACE          reduce using rule 18 (statement -> var_declaration .)
    DEFAULT         reduce using rule 18 (statement -> var_declaration .)
    CASE            reduce using rule 18 (statement -> var_declaration .)


state 129

    (19) statement -> short_var_declaration .

    CONTINUE        reduce using rule 19 (statement -> short_var_declaration .)
    BREAK           reduce using rule 19 (statement -> short_var_declaration .)
    VAR             reduce using rule 19 (statement -> short_var_declaration .)
    ID              reduce using rule 19 (statement -> short_var_declaration .)
    IF              reduce using rule 19 (statement -> short_var_declaration .)
    FOR             reduce using rule 19 (statement -> short_var_declaration .)
    SWITCH          reduce using rule 19 (statement -> short_var_declaration .)
    RETURN          reduce using rule 19 (statement -> short_var_declaration .)
    NOT             reduce using rule 19 (statement -> short_var_declaration .)
    MINUS           reduce using rule 19 (statement -> short_var_declaration .)
    LPAREN          reduce using rule 19 (statement -> short_var_declaration .)
    NUMBER_LITERAL  reduce using rule 19 (statement -> short_var_declaration .)
    STRING_LITERAL  reduce using rule 19 (statement -> short_var_declaration .)
    BOOLEAN_LITERAL reduce using rule 19 (statement -> short_var_declaration .)
    RBRACE          reduce using rule 19 (statement -> short_var_declaration .)
    DEFAULT         reduce using rule 19 (statement -> short_var_declaration .)
    CASE            reduce using rule 19 (statement -> short_var_declaration .)


state 130

    (20) statement -> expression_statement .

    CONTINUE        reduce using rule 20 (statement -> expression_statement .)
    BREAK           reduce using rule 20 (statement -> expression_statement .)
    VAR             reduce using rule 20 (statement -> expression_statement .)
    ID              reduce using rule 20 (statement -> expression_statement .)
    IF              reduce using rule 20 (statement -> expression_statement .)
    FOR             reduce using rule 20 (statement -> expression_statement .)
    SWITCH          reduce using rule 20 (statement -> expression_statement .)
    RETURN          reduce using rule 20 (statement -> expression_statement .)
    NOT             reduce using rule 20 (statement -> expression_statement .)
    MINUS           reduce using rule 20 (statement -> expression_statement .)
    LPAREN          reduce using rule 20 (statement -> expression_statement .)
    NUMBER_LITERAL  reduce using rule 20 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 20 (statement -> expression_statement .)
    BOOLEAN_LITERAL reduce using rule 20 (statement -> expression_statement .)
    RBRACE          reduce using rule 20 (statement -> expression_statement .)
    DEFAULT         reduce using rule 20 (statement -> expression_statement .)
    CASE            reduce using rule 20 (statement -> expression_statement .)


state 131

    (21) statement -> if_statement .

    CONTINUE        reduce using rule 21 (statement -> if_statement .)
    BREAK           reduce using rule 21 (statement -> if_statement .)
    VAR             reduce using rule 21 (statement -> if_statement .)
    ID              reduce using rule 21 (statement -> if_statement .)
    IF              reduce using rule 21 (statement -> if_statement .)
    FOR             reduce using rule 21 (statement -> if_statement .)
    SWITCH          reduce using rule 21 (statement -> if_statement .)
    RETURN          reduce using rule 21 (statement -> if_statement .)
    NOT             reduce using rule 21 (statement -> if_statement .)
    MINUS           reduce using rule 21 (statement -> if_statement .)
    LPAREN          reduce using rule 21 (statement -> if_statement .)
    NUMBER_LITERAL  reduce using rule 21 (statement -> if_statement .)
    STRING_LITERAL  reduce using rule 21 (statement -> if_statement .)
    BOOLEAN_LITERAL reduce using rule 21 (statement -> if_statement .)
    RBRACE          reduce using rule 21 (statement -> if_statement .)
    DEFAULT         reduce using rule 21 (statement -> if_statement .)
    CASE            reduce using rule 21 (statement -> if_statement .)


state 132

    (22) statement -> for_statement .

    CONTINUE        reduce using rule 22 (statement -> for_statement .)
    BREAK           reduce using rule 22 (statement -> for_statement .)
    VAR             reduce using rule 22 (statement -> for_statement .)
    ID              reduce using rule 22 (statement -> for_statement .)
    IF              reduce using rule 22 (statement -> for_statement .)
    FOR             reduce using rule 22 (statement -> for_statement .)
    SWITCH          reduce using rule 22 (statement -> for_statement .)
    RETURN          reduce using rule 22 (statement -> for_statement .)
    NOT             reduce using rule 22 (statement -> for_statement .)
    MINUS           reduce using rule 22 (statement -> for_statement .)
    LPAREN          reduce using rule 22 (statement -> for_statement .)
    NUMBER_LITERAL  reduce using rule 22 (statement -> for_statement .)
    STRING_LITERAL  reduce using rule 22 (statement -> for_statement .)
    BOOLEAN_LITERAL reduce using rule 22 (statement -> for_statement .)
    RBRACE          reduce using rule 22 (statement -> for_statement .)
    DEFAULT         reduce using rule 22 (statement -> for_statement .)
    CASE            reduce using rule 22 (statement -> for_statement .)


state 133

    (23) statement -> switch_statement .

    CONTINUE        reduce using rule 23 (statement -> switch_statement .)
    BREAK           reduce using rule 23 (statement -> switch_statement .)
    VAR             reduce using rule 23 (statement -> switch_statement .)
    ID              reduce using rule 23 (statement -> switch_statement .)
    IF              reduce using rule 23 (statement -> switch_statement .)
    FOR             reduce using rule 23 (statement -> switch_statement .)
    SWITCH          reduce using rule 23 (statement -> switch_statement .)
    RETURN          reduce using rule 23 (statement -> switch_statement .)
    NOT             reduce using rule 23 (statement -> switch_statement .)
    MINUS           reduce using rule 23 (statement -> switch_statement .)
    LPAREN          reduce using rule 23 (statement -> switch_statement .)
    NUMBER_LITERAL  reduce using rule 23 (statement -> switch_statement .)
    STRING_LITERAL  reduce using rule 23 (statement -> switch_statement .)
    BOOLEAN_LITERAL reduce using rule 23 (statement -> switch_statement .)
    RBRACE          reduce using rule 23 (statement -> switch_statement .)
    DEFAULT         reduce using rule 23 (statement -> switch_statement .)
    CASE            reduce using rule 23 (statement -> switch_statement .)


state 134

    (24) statement -> return_statement .

    CONTINUE        reduce using rule 24 (statement -> return_statement .)
    BREAK           reduce using rule 24 (statement -> return_statement .)
    VAR             reduce using rule 24 (statement -> return_statement .)
    ID              reduce using rule 24 (statement -> return_statement .)
    IF              reduce using rule 24 (statement -> return_statement .)
    FOR             reduce using rule 24 (statement -> return_statement .)
    SWITCH          reduce using rule 24 (statement -> return_statement .)
    RETURN          reduce using rule 24 (statement -> return_statement .)
    NOT             reduce using rule 24 (statement -> return_statement .)
    MINUS           reduce using rule 24 (statement -> return_statement .)
    LPAREN          reduce using rule 24 (statement -> return_statement .)
    NUMBER_LITERAL  reduce using rule 24 (statement -> return_statement .)
    STRING_LITERAL  reduce using rule 24 (statement -> return_statement .)
    BOOLEAN_LITERAL reduce using rule 24 (statement -> return_statement .)
    RBRACE          reduce using rule 24 (statement -> return_statement .)
    DEFAULT         reduce using rule 24 (statement -> return_statement .)
    CASE            reduce using rule 24 (statement -> return_statement .)


state 135

    (25) statement -> assignment .

    CONTINUE        reduce using rule 25 (statement -> assignment .)
    BREAK           reduce using rule 25 (statement -> assignment .)
    VAR             reduce using rule 25 (statement -> assignment .)
    ID              reduce using rule 25 (statement -> assignment .)
    IF              reduce using rule 25 (statement -> assignment .)
    FOR             reduce using rule 25 (statement -> assignment .)
    SWITCH          reduce using rule 25 (statement -> assignment .)
    RETURN          reduce using rule 25 (statement -> assignment .)
    NOT             reduce using rule 25 (statement -> assignment .)
    MINUS           reduce using rule 25 (statement -> assignment .)
    LPAREN          reduce using rule 25 (statement -> assignment .)
    NUMBER_LITERAL  reduce using rule 25 (statement -> assignment .)
    STRING_LITERAL  reduce using rule 25 (statement -> assignment .)
    BOOLEAN_LITERAL reduce using rule 25 (statement -> assignment .)
    RBRACE          reduce using rule 25 (statement -> assignment .)
    DEFAULT         reduce using rule 25 (statement -> assignment .)
    CASE            reduce using rule 25 (statement -> assignment .)


state 136

    (26) statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 147


state 137

    (27) statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 148


state 138

    (51) var_declaration -> ID . WALRUS array_type array_initializer SEMICOLON
    (54) short_var_declaration -> ID . WALRUS expression SEMICOLON
    (66) assignment -> ID . EQUAL expression SEMICOLON
    (68) assignment -> ID . EQUAL array_initializer SEMICOLON
    (86) expression -> ID .
    (88) expression -> ID . INCREMENT
    (89) expression -> ID . DECREMENT
    (64) array_access -> ID . LBRACKET expression RBRACKET
    (91) function_call -> ID . LPAREN arguments_opt RPAREN

    WALRUS          shift and go to state 12
    EQUAL           shift and go to state 149
    SEMICOLON       reduce using rule 86 (expression -> ID .)
    PLUS            reduce using rule 86 (expression -> ID .)
    MINUS           reduce using rule 86 (expression -> ID .)
    TIMES           reduce using rule 86 (expression -> ID .)
    DIVIDE          reduce using rule 86 (expression -> ID .)
    MODULO          reduce using rule 86 (expression -> ID .)
    EQUALITY        reduce using rule 86 (expression -> ID .)
    NOTEQUAL        reduce using rule 86 (expression -> ID .)
    GREATER         reduce using rule 86 (expression -> ID .)
    LESS            reduce using rule 86 (expression -> ID .)
    GREATEROREQUAL  reduce using rule 86 (expression -> ID .)
    LESSOREQUAL     reduce using rule 86 (expression -> ID .)
    CONDITIONALAND  reduce using rule 86 (expression -> ID .)
    CONDITIONALOR   reduce using rule 86 (expression -> ID .)
    INCREMENT       shift and go to state 40
    DECREMENT       shift and go to state 41
    LBRACKET        shift and go to state 42
    LPAREN          shift and go to state 43


state 139

    (28) expression_statement -> expression . SEMICOLON
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       shift and go to state 150
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60


state 140

    (29) if_statement -> IF . expression block else_clause
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 151
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 141

    (33) for_statement -> FOR . for_init SEMICOLON expression SEMICOLON for_post block
    (34) for_statement -> FOR . expression block
    (35) for_statement -> FOR . block
    (36) for_init -> . ID WALRUS expression
    (37) for_init -> . VAR ID type EQUAL expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (13) block -> . LBRACE block_contents RBRACE
    (14) block -> . LBRACE RBRACE
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    ID              shift and go to state 155
    VAR             shift and go to state 156
    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    LBRACE          shift and go to state 120
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    for_init                       shift and go to state 152
    expression                     shift and go to state 153
    block                          shift and go to state 154
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 142

    (40) switch_statement -> SWITCH . expression LBRACE switch_cases default_clause RBRACE
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 157
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 143

    (46) return_statement -> RETURN . expression_opt SEMICOLON
    (47) expression_opt -> . expression
    (48) expression_opt -> . empty
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (106) empty -> .
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    SEMICOLON       reduce using rule 106 (empty -> .)
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression_opt                 shift and go to state 158
    expression                     shift and go to state 159
    empty                          shift and go to state 160
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 144

    (67) assignment -> array_access . EQUAL expression SEMICOLON
    (87) expression -> array_access .
    (65) array_access -> array_access . LBRACKET expression RBRACKET

    EQUAL           shift and go to state 161
    SEMICOLON       reduce using rule 87 (expression -> array_access .)
    PLUS            reduce using rule 87 (expression -> array_access .)
    MINUS           reduce using rule 87 (expression -> array_access .)
    TIMES           reduce using rule 87 (expression -> array_access .)
    DIVIDE          reduce using rule 87 (expression -> array_access .)
    MODULO          reduce using rule 87 (expression -> array_access .)
    EQUALITY        reduce using rule 87 (expression -> array_access .)
    NOTEQUAL        reduce using rule 87 (expression -> array_access .)
    GREATER         reduce using rule 87 (expression -> array_access .)
    LESS            reduce using rule 87 (expression -> array_access .)
    GREATEROREQUAL  reduce using rule 87 (expression -> array_access .)
    LESSOREQUAL     reduce using rule 87 (expression -> array_access .)
    CONDITIONALAND  reduce using rule 87 (expression -> array_access .)
    CONDITIONALOR   reduce using rule 87 (expression -> array_access .)
    LBRACE          reduce using rule 87 (expression -> array_access .)
    LBRACKET        shift and go to state 65


state 145

    (13) block -> LBRACE block_contents RBRACE .

    FUNC            reduce using rule 13 (block -> LBRACE block_contents RBRACE .)
    VAR             reduce using rule 13 (block -> LBRACE block_contents RBRACE .)
    ID              reduce using rule 13 (block -> LBRACE block_contents RBRACE .)
    $end            reduce using rule 13 (block -> LBRACE block_contents RBRACE .)
    CONTINUE        reduce using rule 13 (block -> LBRACE block_contents RBRACE .)
    BREAK           reduce using rule 13 (block -> LBRACE block_contents RBRACE .)
    IF              reduce using rule 13 (block -> LBRACE block_contents RBRACE .)
    FOR             reduce using rule 13 (block -> LBRACE block_contents RBRACE .)
    SWITCH          reduce using rule 13 (block -> LBRACE block_contents RBRACE .)
    RETURN          reduce using rule 13 (block -> LBRACE block_contents RBRACE .)
    NOT             reduce using rule 13 (block -> LBRACE block_contents RBRACE .)
    MINUS           reduce using rule 13 (block -> LBRACE block_contents RBRACE .)
    LPAREN          reduce using rule 13 (block -> LBRACE block_contents RBRACE .)
    NUMBER_LITERAL  reduce using rule 13 (block -> LBRACE block_contents RBRACE .)
    STRING_LITERAL  reduce using rule 13 (block -> LBRACE block_contents RBRACE .)
    BOOLEAN_LITERAL reduce using rule 13 (block -> LBRACE block_contents RBRACE .)
    RBRACE          reduce using rule 13 (block -> LBRACE block_contents RBRACE .)
    DEFAULT         reduce using rule 13 (block -> LBRACE block_contents RBRACE .)
    CASE            reduce using rule 13 (block -> LBRACE block_contents RBRACE .)
    ELSE            reduce using rule 13 (block -> LBRACE block_contents RBRACE .)


state 146

    (16) statements -> statements statement .

    CONTINUE        reduce using rule 16 (statements -> statements statement .)
    BREAK           reduce using rule 16 (statements -> statements statement .)
    VAR             reduce using rule 16 (statements -> statements statement .)
    ID              reduce using rule 16 (statements -> statements statement .)
    IF              reduce using rule 16 (statements -> statements statement .)
    FOR             reduce using rule 16 (statements -> statements statement .)
    SWITCH          reduce using rule 16 (statements -> statements statement .)
    RETURN          reduce using rule 16 (statements -> statements statement .)
    NOT             reduce using rule 16 (statements -> statements statement .)
    MINUS           reduce using rule 16 (statements -> statements statement .)
    LPAREN          reduce using rule 16 (statements -> statements statement .)
    NUMBER_LITERAL  reduce using rule 16 (statements -> statements statement .)
    STRING_LITERAL  reduce using rule 16 (statements -> statements statement .)
    BOOLEAN_LITERAL reduce using rule 16 (statements -> statements statement .)
    RBRACE          reduce using rule 16 (statements -> statements statement .)
    DEFAULT         reduce using rule 16 (statements -> statements statement .)
    CASE            reduce using rule 16 (statements -> statements statement .)


state 147

    (26) statement -> CONTINUE SEMICOLON .

    CONTINUE        reduce using rule 26 (statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 26 (statement -> CONTINUE SEMICOLON .)
    VAR             reduce using rule 26 (statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 26 (statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 26 (statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 26 (statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 26 (statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 26 (statement -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 26 (statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 26 (statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 26 (statement -> CONTINUE SEMICOLON .)
    NUMBER_LITERAL  reduce using rule 26 (statement -> CONTINUE SEMICOLON .)
    STRING_LITERAL  reduce using rule 26 (statement -> CONTINUE SEMICOLON .)
    BOOLEAN_LITERAL reduce using rule 26 (statement -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 26 (statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 26 (statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 26 (statement -> CONTINUE SEMICOLON .)


state 148

    (27) statement -> BREAK SEMICOLON .

    CONTINUE        reduce using rule 27 (statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 27 (statement -> BREAK SEMICOLON .)
    VAR             reduce using rule 27 (statement -> BREAK SEMICOLON .)
    ID              reduce using rule 27 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 27 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 27 (statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 27 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 27 (statement -> BREAK SEMICOLON .)
    NOT             reduce using rule 27 (statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 27 (statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 27 (statement -> BREAK SEMICOLON .)
    NUMBER_LITERAL  reduce using rule 27 (statement -> BREAK SEMICOLON .)
    STRING_LITERAL  reduce using rule 27 (statement -> BREAK SEMICOLON .)
    BOOLEAN_LITERAL reduce using rule 27 (statement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 27 (statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 27 (statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 27 (statement -> BREAK SEMICOLON .)


state 149

    (66) assignment -> ID EQUAL . expression SEMICOLON
    (68) assignment -> ID EQUAL . array_initializer SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (59) array_initializer -> . LBRACE RBRACE
    (60) array_initializer -> . LBRACE expression_list RBRACE
    (61) array_initializer -> . LBRACE nested_initializer_list RBRACE
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    LBRACE          shift and go to state 46
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 162
    array_initializer              shift and go to state 163
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 150

    (28) expression_statement -> expression SEMICOLON .

    CONTINUE        reduce using rule 28 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 28 (expression_statement -> expression SEMICOLON .)
    VAR             reduce using rule 28 (expression_statement -> expression SEMICOLON .)
    ID              reduce using rule 28 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 28 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 28 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 28 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 28 (expression_statement -> expression SEMICOLON .)
    NOT             reduce using rule 28 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 28 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 28 (expression_statement -> expression SEMICOLON .)
    NUMBER_LITERAL  reduce using rule 28 (expression_statement -> expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 28 (expression_statement -> expression SEMICOLON .)
    BOOLEAN_LITERAL reduce using rule 28 (expression_statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 28 (expression_statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 28 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 28 (expression_statement -> expression SEMICOLON .)


state 151

    (29) if_statement -> IF expression . block else_clause
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression
    (13) block -> . LBRACE block_contents RBRACE
    (14) block -> . LBRACE RBRACE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60
    LBRACE          shift and go to state 120

    block                          shift and go to state 164

state 152

    (33) for_statement -> FOR for_init . SEMICOLON expression SEMICOLON for_post block

    SEMICOLON       shift and go to state 165


state 153

    (34) for_statement -> FOR expression . block
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression
    (13) block -> . LBRACE block_contents RBRACE
    (14) block -> . LBRACE RBRACE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60
    LBRACE          shift and go to state 120

    block                          shift and go to state 166

state 154

    (35) for_statement -> FOR block .

    CONTINUE        reduce using rule 35 (for_statement -> FOR block .)
    BREAK           reduce using rule 35 (for_statement -> FOR block .)
    VAR             reduce using rule 35 (for_statement -> FOR block .)
    ID              reduce using rule 35 (for_statement -> FOR block .)
    IF              reduce using rule 35 (for_statement -> FOR block .)
    FOR             reduce using rule 35 (for_statement -> FOR block .)
    SWITCH          reduce using rule 35 (for_statement -> FOR block .)
    RETURN          reduce using rule 35 (for_statement -> FOR block .)
    NOT             reduce using rule 35 (for_statement -> FOR block .)
    MINUS           reduce using rule 35 (for_statement -> FOR block .)
    LPAREN          reduce using rule 35 (for_statement -> FOR block .)
    NUMBER_LITERAL  reduce using rule 35 (for_statement -> FOR block .)
    STRING_LITERAL  reduce using rule 35 (for_statement -> FOR block .)
    BOOLEAN_LITERAL reduce using rule 35 (for_statement -> FOR block .)
    RBRACE          reduce using rule 35 (for_statement -> FOR block .)
    DEFAULT         reduce using rule 35 (for_statement -> FOR block .)
    CASE            reduce using rule 35 (for_statement -> FOR block .)


state 155

    (36) for_init -> ID . WALRUS expression
    (86) expression -> ID .
    (88) expression -> ID . INCREMENT
    (89) expression -> ID . DECREMENT
    (64) array_access -> ID . LBRACKET expression RBRACKET
    (91) function_call -> ID . LPAREN arguments_opt RPAREN

    WALRUS          shift and go to state 167
    PLUS            reduce using rule 86 (expression -> ID .)
    MINUS           reduce using rule 86 (expression -> ID .)
    TIMES           reduce using rule 86 (expression -> ID .)
    DIVIDE          reduce using rule 86 (expression -> ID .)
    MODULO          reduce using rule 86 (expression -> ID .)
    EQUALITY        reduce using rule 86 (expression -> ID .)
    NOTEQUAL        reduce using rule 86 (expression -> ID .)
    GREATER         reduce using rule 86 (expression -> ID .)
    LESS            reduce using rule 86 (expression -> ID .)
    GREATEROREQUAL  reduce using rule 86 (expression -> ID .)
    LESSOREQUAL     reduce using rule 86 (expression -> ID .)
    CONDITIONALAND  reduce using rule 86 (expression -> ID .)
    CONDITIONALOR   reduce using rule 86 (expression -> ID .)
    LBRACE          reduce using rule 86 (expression -> ID .)
    INCREMENT       shift and go to state 40
    DECREMENT       shift and go to state 41
    LBRACKET        shift and go to state 42
    LPAREN          shift and go to state 43


state 156

    (37) for_init -> VAR . ID type EQUAL expression

    ID              shift and go to state 168


state 157

    (40) switch_statement -> SWITCH expression . LBRACE switch_cases default_clause RBRACE
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    LBRACE          shift and go to state 169
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60


state 158

    (46) return_statement -> RETURN expression_opt . SEMICOLON

    SEMICOLON       shift and go to state 170


state 159

    (47) expression_opt -> expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       reduce using rule 47 (expression_opt -> expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60


state 160

    (48) expression_opt -> empty .

    SEMICOLON       reduce using rule 48 (expression_opt -> empty .)


state 161

    (67) assignment -> array_access EQUAL . expression SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    array_access                   shift and go to state 24
    expression                     shift and go to state 171
    literal                        shift and go to state 23
    function_call                  shift and go to state 25

state 162

    (66) assignment -> ID EQUAL expression . SEMICOLON
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       shift and go to state 172
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60


state 163

    (68) assignment -> ID EQUAL array_initializer . SEMICOLON

    SEMICOLON       shift and go to state 173


state 164

    (29) if_statement -> IF expression block . else_clause
    (30) else_clause -> . ELSE if_statement
    (31) else_clause -> . ELSE block
    (32) else_clause -> . empty
    (106) empty -> .

    ELSE            shift and go to state 175
    CONTINUE        reduce using rule 106 (empty -> .)
    BREAK           reduce using rule 106 (empty -> .)
    VAR             reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    FOR             reduce using rule 106 (empty -> .)
    SWITCH          reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    NOT             reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    LPAREN          reduce using rule 106 (empty -> .)
    NUMBER_LITERAL  reduce using rule 106 (empty -> .)
    STRING_LITERAL  reduce using rule 106 (empty -> .)
    BOOLEAN_LITERAL reduce using rule 106 (empty -> .)
    RBRACE          reduce using rule 106 (empty -> .)
    DEFAULT         reduce using rule 106 (empty -> .)
    CASE            reduce using rule 106 (empty -> .)

    else_clause                    shift and go to state 174
    empty                          shift and go to state 176

state 165

    (33) for_statement -> FOR for_init SEMICOLON . expression SEMICOLON for_post block
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 177
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 166

    (34) for_statement -> FOR expression block .

    CONTINUE        reduce using rule 34 (for_statement -> FOR expression block .)
    BREAK           reduce using rule 34 (for_statement -> FOR expression block .)
    VAR             reduce using rule 34 (for_statement -> FOR expression block .)
    ID              reduce using rule 34 (for_statement -> FOR expression block .)
    IF              reduce using rule 34 (for_statement -> FOR expression block .)
    FOR             reduce using rule 34 (for_statement -> FOR expression block .)
    SWITCH          reduce using rule 34 (for_statement -> FOR expression block .)
    RETURN          reduce using rule 34 (for_statement -> FOR expression block .)
    NOT             reduce using rule 34 (for_statement -> FOR expression block .)
    MINUS           reduce using rule 34 (for_statement -> FOR expression block .)
    LPAREN          reduce using rule 34 (for_statement -> FOR expression block .)
    NUMBER_LITERAL  reduce using rule 34 (for_statement -> FOR expression block .)
    STRING_LITERAL  reduce using rule 34 (for_statement -> FOR expression block .)
    BOOLEAN_LITERAL reduce using rule 34 (for_statement -> FOR expression block .)
    RBRACE          reduce using rule 34 (for_statement -> FOR expression block .)
    DEFAULT         reduce using rule 34 (for_statement -> FOR expression block .)
    CASE            reduce using rule 34 (for_statement -> FOR expression block .)


state 167

    (36) for_init -> ID WALRUS . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 178
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 168

    (37) for_init -> VAR ID . type EQUAL expression
    (101) type -> . INT
    (102) type -> . FLOAT
    (103) type -> . BOOL
    (104) type -> . STRING
    (105) type -> . VOID

    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    BOOL            shift and go to state 28
    STRING          shift and go to state 29
    VOID            shift and go to state 30

    type                           shift and go to state 179

state 169

    (40) switch_statement -> SWITCH expression LBRACE . switch_cases default_clause RBRACE
    (41) switch_cases -> . switch_cases switch_case
    (42) switch_cases -> . switch_case
    (43) switch_case -> . CASE expression COLON statements

    CASE            shift and go to state 182

    switch_cases                   shift and go to state 180
    switch_case                    shift and go to state 181

state 170

    (46) return_statement -> RETURN expression_opt SEMICOLON .

    CONTINUE        reduce using rule 46 (return_statement -> RETURN expression_opt SEMICOLON .)
    BREAK           reduce using rule 46 (return_statement -> RETURN expression_opt SEMICOLON .)
    VAR             reduce using rule 46 (return_statement -> RETURN expression_opt SEMICOLON .)
    ID              reduce using rule 46 (return_statement -> RETURN expression_opt SEMICOLON .)
    IF              reduce using rule 46 (return_statement -> RETURN expression_opt SEMICOLON .)
    FOR             reduce using rule 46 (return_statement -> RETURN expression_opt SEMICOLON .)
    SWITCH          reduce using rule 46 (return_statement -> RETURN expression_opt SEMICOLON .)
    RETURN          reduce using rule 46 (return_statement -> RETURN expression_opt SEMICOLON .)
    NOT             reduce using rule 46 (return_statement -> RETURN expression_opt SEMICOLON .)
    MINUS           reduce using rule 46 (return_statement -> RETURN expression_opt SEMICOLON .)
    LPAREN          reduce using rule 46 (return_statement -> RETURN expression_opt SEMICOLON .)
    NUMBER_LITERAL  reduce using rule 46 (return_statement -> RETURN expression_opt SEMICOLON .)
    STRING_LITERAL  reduce using rule 46 (return_statement -> RETURN expression_opt SEMICOLON .)
    BOOLEAN_LITERAL reduce using rule 46 (return_statement -> RETURN expression_opt SEMICOLON .)
    RBRACE          reduce using rule 46 (return_statement -> RETURN expression_opt SEMICOLON .)
    DEFAULT         reduce using rule 46 (return_statement -> RETURN expression_opt SEMICOLON .)
    CASE            reduce using rule 46 (return_statement -> RETURN expression_opt SEMICOLON .)


state 171

    (67) assignment -> array_access EQUAL expression . SEMICOLON
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       shift and go to state 183
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60


state 172

    (66) assignment -> ID EQUAL expression SEMICOLON .

    CONTINUE        reduce using rule 66 (assignment -> ID EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 66 (assignment -> ID EQUAL expression SEMICOLON .)
    VAR             reduce using rule 66 (assignment -> ID EQUAL expression SEMICOLON .)
    ID              reduce using rule 66 (assignment -> ID EQUAL expression SEMICOLON .)
    IF              reduce using rule 66 (assignment -> ID EQUAL expression SEMICOLON .)
    FOR             reduce using rule 66 (assignment -> ID EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 66 (assignment -> ID EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 66 (assignment -> ID EQUAL expression SEMICOLON .)
    NOT             reduce using rule 66 (assignment -> ID EQUAL expression SEMICOLON .)
    MINUS           reduce using rule 66 (assignment -> ID EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 66 (assignment -> ID EQUAL expression SEMICOLON .)
    NUMBER_LITERAL  reduce using rule 66 (assignment -> ID EQUAL expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 66 (assignment -> ID EQUAL expression SEMICOLON .)
    BOOLEAN_LITERAL reduce using rule 66 (assignment -> ID EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 66 (assignment -> ID EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 66 (assignment -> ID EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 66 (assignment -> ID EQUAL expression SEMICOLON .)
    CASE            reduce using rule 66 (assignment -> ID EQUAL expression SEMICOLON .)


state 173

    (68) assignment -> ID EQUAL array_initializer SEMICOLON .

    CONTINUE        reduce using rule 68 (assignment -> ID EQUAL array_initializer SEMICOLON .)
    BREAK           reduce using rule 68 (assignment -> ID EQUAL array_initializer SEMICOLON .)
    VAR             reduce using rule 68 (assignment -> ID EQUAL array_initializer SEMICOLON .)
    ID              reduce using rule 68 (assignment -> ID EQUAL array_initializer SEMICOLON .)
    IF              reduce using rule 68 (assignment -> ID EQUAL array_initializer SEMICOLON .)
    FOR             reduce using rule 68 (assignment -> ID EQUAL array_initializer SEMICOLON .)
    SWITCH          reduce using rule 68 (assignment -> ID EQUAL array_initializer SEMICOLON .)
    RETURN          reduce using rule 68 (assignment -> ID EQUAL array_initializer SEMICOLON .)
    NOT             reduce using rule 68 (assignment -> ID EQUAL array_initializer SEMICOLON .)
    MINUS           reduce using rule 68 (assignment -> ID EQUAL array_initializer SEMICOLON .)
    LPAREN          reduce using rule 68 (assignment -> ID EQUAL array_initializer SEMICOLON .)
    NUMBER_LITERAL  reduce using rule 68 (assignment -> ID EQUAL array_initializer SEMICOLON .)
    STRING_LITERAL  reduce using rule 68 (assignment -> ID EQUAL array_initializer SEMICOLON .)
    BOOLEAN_LITERAL reduce using rule 68 (assignment -> ID EQUAL array_initializer SEMICOLON .)
    RBRACE          reduce using rule 68 (assignment -> ID EQUAL array_initializer SEMICOLON .)
    LBRACE          reduce using rule 68 (assignment -> ID EQUAL array_initializer SEMICOLON .)
    DEFAULT         reduce using rule 68 (assignment -> ID EQUAL array_initializer SEMICOLON .)
    CASE            reduce using rule 68 (assignment -> ID EQUAL array_initializer SEMICOLON .)


state 174

    (29) if_statement -> IF expression block else_clause .

    CONTINUE        reduce using rule 29 (if_statement -> IF expression block else_clause .)
    BREAK           reduce using rule 29 (if_statement -> IF expression block else_clause .)
    VAR             reduce using rule 29 (if_statement -> IF expression block else_clause .)
    ID              reduce using rule 29 (if_statement -> IF expression block else_clause .)
    IF              reduce using rule 29 (if_statement -> IF expression block else_clause .)
    FOR             reduce using rule 29 (if_statement -> IF expression block else_clause .)
    SWITCH          reduce using rule 29 (if_statement -> IF expression block else_clause .)
    RETURN          reduce using rule 29 (if_statement -> IF expression block else_clause .)
    NOT             reduce using rule 29 (if_statement -> IF expression block else_clause .)
    MINUS           reduce using rule 29 (if_statement -> IF expression block else_clause .)
    LPAREN          reduce using rule 29 (if_statement -> IF expression block else_clause .)
    NUMBER_LITERAL  reduce using rule 29 (if_statement -> IF expression block else_clause .)
    STRING_LITERAL  reduce using rule 29 (if_statement -> IF expression block else_clause .)
    BOOLEAN_LITERAL reduce using rule 29 (if_statement -> IF expression block else_clause .)
    RBRACE          reduce using rule 29 (if_statement -> IF expression block else_clause .)
    DEFAULT         reduce using rule 29 (if_statement -> IF expression block else_clause .)
    CASE            reduce using rule 29 (if_statement -> IF expression block else_clause .)


state 175

    (30) else_clause -> ELSE . if_statement
    (31) else_clause -> ELSE . block
    (29) if_statement -> . IF expression block else_clause
    (13) block -> . LBRACE block_contents RBRACE
    (14) block -> . LBRACE RBRACE

    IF              shift and go to state 140
    LBRACE          shift and go to state 120

    if_statement                   shift and go to state 184
    block                          shift and go to state 185

state 176

    (32) else_clause -> empty .

    CONTINUE        reduce using rule 32 (else_clause -> empty .)
    BREAK           reduce using rule 32 (else_clause -> empty .)
    VAR             reduce using rule 32 (else_clause -> empty .)
    ID              reduce using rule 32 (else_clause -> empty .)
    IF              reduce using rule 32 (else_clause -> empty .)
    FOR             reduce using rule 32 (else_clause -> empty .)
    SWITCH          reduce using rule 32 (else_clause -> empty .)
    RETURN          reduce using rule 32 (else_clause -> empty .)
    NOT             reduce using rule 32 (else_clause -> empty .)
    MINUS           reduce using rule 32 (else_clause -> empty .)
    LPAREN          reduce using rule 32 (else_clause -> empty .)
    NUMBER_LITERAL  reduce using rule 32 (else_clause -> empty .)
    STRING_LITERAL  reduce using rule 32 (else_clause -> empty .)
    BOOLEAN_LITERAL reduce using rule 32 (else_clause -> empty .)
    RBRACE          reduce using rule 32 (else_clause -> empty .)
    DEFAULT         reduce using rule 32 (else_clause -> empty .)
    CASE            reduce using rule 32 (else_clause -> empty .)


state 177

    (33) for_statement -> FOR for_init SEMICOLON expression . SEMICOLON for_post block
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       shift and go to state 186
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60


state 178

    (36) for_init -> ID WALRUS expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       reduce using rule 36 (for_init -> ID WALRUS expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60


state 179

    (37) for_init -> VAR ID type . EQUAL expression

    EQUAL           shift and go to state 187


state 180

    (40) switch_statement -> SWITCH expression LBRACE switch_cases . default_clause RBRACE
    (41) switch_cases -> switch_cases . switch_case
    (44) default_clause -> . DEFAULT COLON statements
    (45) default_clause -> . empty
    (43) switch_case -> . CASE expression COLON statements
    (106) empty -> .

    DEFAULT         shift and go to state 190
    CASE            shift and go to state 182
    RBRACE          reduce using rule 106 (empty -> .)

    default_clause                 shift and go to state 188
    switch_case                    shift and go to state 189
    empty                          shift and go to state 191

state 181

    (42) switch_cases -> switch_case .

    DEFAULT         reduce using rule 42 (switch_cases -> switch_case .)
    CASE            reduce using rule 42 (switch_cases -> switch_case .)
    RBRACE          reduce using rule 42 (switch_cases -> switch_case .)


state 182

    (43) switch_case -> CASE . expression COLON statements
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 192
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 183

    (67) assignment -> array_access EQUAL expression SEMICOLON .

    CONTINUE        reduce using rule 67 (assignment -> array_access EQUAL expression SEMICOLON .)
    BREAK           reduce using rule 67 (assignment -> array_access EQUAL expression SEMICOLON .)
    VAR             reduce using rule 67 (assignment -> array_access EQUAL expression SEMICOLON .)
    ID              reduce using rule 67 (assignment -> array_access EQUAL expression SEMICOLON .)
    IF              reduce using rule 67 (assignment -> array_access EQUAL expression SEMICOLON .)
    FOR             reduce using rule 67 (assignment -> array_access EQUAL expression SEMICOLON .)
    SWITCH          reduce using rule 67 (assignment -> array_access EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 67 (assignment -> array_access EQUAL expression SEMICOLON .)
    NOT             reduce using rule 67 (assignment -> array_access EQUAL expression SEMICOLON .)
    MINUS           reduce using rule 67 (assignment -> array_access EQUAL expression SEMICOLON .)
    LPAREN          reduce using rule 67 (assignment -> array_access EQUAL expression SEMICOLON .)
    NUMBER_LITERAL  reduce using rule 67 (assignment -> array_access EQUAL expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 67 (assignment -> array_access EQUAL expression SEMICOLON .)
    BOOLEAN_LITERAL reduce using rule 67 (assignment -> array_access EQUAL expression SEMICOLON .)
    RBRACE          reduce using rule 67 (assignment -> array_access EQUAL expression SEMICOLON .)
    LBRACE          reduce using rule 67 (assignment -> array_access EQUAL expression SEMICOLON .)
    DEFAULT         reduce using rule 67 (assignment -> array_access EQUAL expression SEMICOLON .)
    CASE            reduce using rule 67 (assignment -> array_access EQUAL expression SEMICOLON .)


state 184

    (30) else_clause -> ELSE if_statement .

    CONTINUE        reduce using rule 30 (else_clause -> ELSE if_statement .)
    BREAK           reduce using rule 30 (else_clause -> ELSE if_statement .)
    VAR             reduce using rule 30 (else_clause -> ELSE if_statement .)
    ID              reduce using rule 30 (else_clause -> ELSE if_statement .)
    IF              reduce using rule 30 (else_clause -> ELSE if_statement .)
    FOR             reduce using rule 30 (else_clause -> ELSE if_statement .)
    SWITCH          reduce using rule 30 (else_clause -> ELSE if_statement .)
    RETURN          reduce using rule 30 (else_clause -> ELSE if_statement .)
    NOT             reduce using rule 30 (else_clause -> ELSE if_statement .)
    MINUS           reduce using rule 30 (else_clause -> ELSE if_statement .)
    LPAREN          reduce using rule 30 (else_clause -> ELSE if_statement .)
    NUMBER_LITERAL  reduce using rule 30 (else_clause -> ELSE if_statement .)
    STRING_LITERAL  reduce using rule 30 (else_clause -> ELSE if_statement .)
    BOOLEAN_LITERAL reduce using rule 30 (else_clause -> ELSE if_statement .)
    RBRACE          reduce using rule 30 (else_clause -> ELSE if_statement .)
    DEFAULT         reduce using rule 30 (else_clause -> ELSE if_statement .)
    CASE            reduce using rule 30 (else_clause -> ELSE if_statement .)


state 185

    (31) else_clause -> ELSE block .

    CONTINUE        reduce using rule 31 (else_clause -> ELSE block .)
    BREAK           reduce using rule 31 (else_clause -> ELSE block .)
    VAR             reduce using rule 31 (else_clause -> ELSE block .)
    ID              reduce using rule 31 (else_clause -> ELSE block .)
    IF              reduce using rule 31 (else_clause -> ELSE block .)
    FOR             reduce using rule 31 (else_clause -> ELSE block .)
    SWITCH          reduce using rule 31 (else_clause -> ELSE block .)
    RETURN          reduce using rule 31 (else_clause -> ELSE block .)
    NOT             reduce using rule 31 (else_clause -> ELSE block .)
    MINUS           reduce using rule 31 (else_clause -> ELSE block .)
    LPAREN          reduce using rule 31 (else_clause -> ELSE block .)
    NUMBER_LITERAL  reduce using rule 31 (else_clause -> ELSE block .)
    STRING_LITERAL  reduce using rule 31 (else_clause -> ELSE block .)
    BOOLEAN_LITERAL reduce using rule 31 (else_clause -> ELSE block .)
    RBRACE          reduce using rule 31 (else_clause -> ELSE block .)
    DEFAULT         reduce using rule 31 (else_clause -> ELSE block .)
    CASE            reduce using rule 31 (else_clause -> ELSE block .)


state 186

    (33) for_statement -> FOR for_init SEMICOLON expression SEMICOLON . for_post block
    (38) for_post -> . assignment
    (39) for_post -> . expression
    (66) assignment -> . ID EQUAL expression SEMICOLON
    (67) assignment -> . array_access EQUAL expression SEMICOLON
    (68) assignment -> . ID EQUAL array_initializer SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    ID              shift and go to state 196
    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 193
    for_post                       shift and go to state 194
    assignment                     shift and go to state 195
    array_access                   shift and go to state 144
    literal                        shift and go to state 23
    function_call                  shift and go to state 25

state 187

    (37) for_init -> VAR ID type EQUAL . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    ID              shift and go to state 15
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 197
    literal                        shift and go to state 23
    array_access                   shift and go to state 24
    function_call                  shift and go to state 25

state 188

    (40) switch_statement -> SWITCH expression LBRACE switch_cases default_clause . RBRACE

    RBRACE          shift and go to state 198


state 189

    (41) switch_cases -> switch_cases switch_case .

    DEFAULT         reduce using rule 41 (switch_cases -> switch_cases switch_case .)
    CASE            reduce using rule 41 (switch_cases -> switch_cases switch_case .)
    RBRACE          reduce using rule 41 (switch_cases -> switch_cases switch_case .)


state 190

    (44) default_clause -> DEFAULT . COLON statements

    COLON           shift and go to state 199


state 191

    (45) default_clause -> empty .

    RBRACE          reduce using rule 45 (default_clause -> empty .)


state 192

    (43) switch_case -> CASE expression . COLON statements
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    COLON           shift and go to state 200
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60


state 193

    (39) for_post -> expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    LBRACE          reduce using rule 39 (for_post -> expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60


state 194

    (33) for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post . block
    (13) block -> . LBRACE block_contents RBRACE
    (14) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 120

    block                          shift and go to state 201

state 195

    (38) for_post -> assignment .

    LBRACE          reduce using rule 38 (for_post -> assignment .)


state 196

    (66) assignment -> ID . EQUAL expression SEMICOLON
    (68) assignment -> ID . EQUAL array_initializer SEMICOLON
    (86) expression -> ID .
    (88) expression -> ID . INCREMENT
    (89) expression -> ID . DECREMENT
    (64) array_access -> ID . LBRACKET expression RBRACKET
    (91) function_call -> ID . LPAREN arguments_opt RPAREN

    EQUAL           shift and go to state 149
    PLUS            reduce using rule 86 (expression -> ID .)
    MINUS           reduce using rule 86 (expression -> ID .)
    TIMES           reduce using rule 86 (expression -> ID .)
    DIVIDE          reduce using rule 86 (expression -> ID .)
    MODULO          reduce using rule 86 (expression -> ID .)
    EQUALITY        reduce using rule 86 (expression -> ID .)
    NOTEQUAL        reduce using rule 86 (expression -> ID .)
    GREATER         reduce using rule 86 (expression -> ID .)
    LESS            reduce using rule 86 (expression -> ID .)
    GREATEROREQUAL  reduce using rule 86 (expression -> ID .)
    LESSOREQUAL     reduce using rule 86 (expression -> ID .)
    CONDITIONALAND  reduce using rule 86 (expression -> ID .)
    CONDITIONALOR   reduce using rule 86 (expression -> ID .)
    LBRACE          reduce using rule 86 (expression -> ID .)
    INCREMENT       shift and go to state 40
    DECREMENT       shift and go to state 41
    LBRACKET        shift and go to state 42
    LPAREN          shift and go to state 43


state 197

    (37) for_init -> VAR ID type EQUAL expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . TIMES expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . MODULO expression
    (74) expression -> expression . EQUALITY expression
    (75) expression -> expression . NOTEQUAL expression
    (76) expression -> expression . GREATER expression
    (77) expression -> expression . LESS expression
    (78) expression -> expression . GREATEROREQUAL expression
    (79) expression -> expression . LESSOREQUAL expression
    (80) expression -> expression . CONDITIONALAND expression
    (81) expression -> expression . CONDITIONALOR expression

    SEMICOLON       reduce using rule 37 (for_init -> VAR ID type EQUAL expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    EQUALITY        shift and go to state 53
    NOTEQUAL        shift and go to state 54
    GREATER         shift and go to state 55
    LESS            shift and go to state 56
    GREATEROREQUAL  shift and go to state 57
    LESSOREQUAL     shift and go to state 58
    CONDITIONALAND  shift and go to state 59
    CONDITIONALOR   shift and go to state 60


state 198

    (40) switch_statement -> SWITCH expression LBRACE switch_cases default_clause RBRACE .

    CONTINUE        reduce using rule 40 (switch_statement -> SWITCH expression LBRACE switch_cases default_clause RBRACE .)
    BREAK           reduce using rule 40 (switch_statement -> SWITCH expression LBRACE switch_cases default_clause RBRACE .)
    VAR             reduce using rule 40 (switch_statement -> SWITCH expression LBRACE switch_cases default_clause RBRACE .)
    ID              reduce using rule 40 (switch_statement -> SWITCH expression LBRACE switch_cases default_clause RBRACE .)
    IF              reduce using rule 40 (switch_statement -> SWITCH expression LBRACE switch_cases default_clause RBRACE .)
    FOR             reduce using rule 40 (switch_statement -> SWITCH expression LBRACE switch_cases default_clause RBRACE .)
    SWITCH          reduce using rule 40 (switch_statement -> SWITCH expression LBRACE switch_cases default_clause RBRACE .)
    RETURN          reduce using rule 40 (switch_statement -> SWITCH expression LBRACE switch_cases default_clause RBRACE .)
    NOT             reduce using rule 40 (switch_statement -> SWITCH expression LBRACE switch_cases default_clause RBRACE .)
    MINUS           reduce using rule 40 (switch_statement -> SWITCH expression LBRACE switch_cases default_clause RBRACE .)
    LPAREN          reduce using rule 40 (switch_statement -> SWITCH expression LBRACE switch_cases default_clause RBRACE .)
    NUMBER_LITERAL  reduce using rule 40 (switch_statement -> SWITCH expression LBRACE switch_cases default_clause RBRACE .)
    STRING_LITERAL  reduce using rule 40 (switch_statement -> SWITCH expression LBRACE switch_cases default_clause RBRACE .)
    BOOLEAN_LITERAL reduce using rule 40 (switch_statement -> SWITCH expression LBRACE switch_cases default_clause RBRACE .)
    RBRACE          reduce using rule 40 (switch_statement -> SWITCH expression LBRACE switch_cases default_clause RBRACE .)
    DEFAULT         reduce using rule 40 (switch_statement -> SWITCH expression LBRACE switch_cases default_clause RBRACE .)
    CASE            reduce using rule 40 (switch_statement -> SWITCH expression LBRACE switch_cases default_clause RBRACE .)


state 199

    (44) default_clause -> DEFAULT COLON . statements
    (16) statements -> . statements statement
    (17) statements -> . statement
    (18) statement -> . var_declaration
    (19) statement -> . short_var_declaration
    (20) statement -> . expression_statement
    (21) statement -> . if_statement
    (22) statement -> . for_statement
    (23) statement -> . switch_statement
    (24) statement -> . return_statement
    (25) statement -> . assignment
    (26) statement -> . CONTINUE SEMICOLON
    (27) statement -> . BREAK SEMICOLON
    (49) var_declaration -> . VAR ID array_type EQUAL array_initializer SEMICOLON
    (50) var_declaration -> . VAR ID array_type SEMICOLON
    (51) var_declaration -> . ID WALRUS array_type array_initializer SEMICOLON
    (52) var_declaration -> . VAR ID type EQUAL expression SEMICOLON
    (53) var_declaration -> . VAR ID type SEMICOLON
    (54) short_var_declaration -> . ID WALRUS expression SEMICOLON
    (28) expression_statement -> . expression SEMICOLON
    (29) if_statement -> . IF expression block else_clause
    (33) for_statement -> . FOR for_init SEMICOLON expression SEMICOLON for_post block
    (34) for_statement -> . FOR expression block
    (35) for_statement -> . FOR block
    (40) switch_statement -> . SWITCH expression LBRACE switch_cases default_clause RBRACE
    (46) return_statement -> . RETURN expression_opt SEMICOLON
    (66) assignment -> . ID EQUAL expression SEMICOLON
    (67) assignment -> . array_access EQUAL expression SEMICOLON
    (68) assignment -> . ID EQUAL array_initializer SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    CONTINUE        shift and go to state 136
    BREAK           shift and go to state 137
    VAR             shift and go to state 9
    ID              shift and go to state 138
    IF              shift and go to state 140
    FOR             shift and go to state 141
    SWITCH          shift and go to state 142
    RETURN          shift and go to state 143
    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    statements                     shift and go to state 202
    statement                      shift and go to state 127
    var_declaration                shift and go to state 128
    short_var_declaration          shift and go to state 129
    expression_statement           shift and go to state 130
    if_statement                   shift and go to state 131
    for_statement                  shift and go to state 132
    switch_statement               shift and go to state 133
    return_statement               shift and go to state 134
    assignment                     shift and go to state 135
    expression                     shift and go to state 139
    array_access                   shift and go to state 144
    literal                        shift and go to state 23
    function_call                  shift and go to state 25

state 200

    (43) switch_case -> CASE expression COLON . statements
    (16) statements -> . statements statement
    (17) statements -> . statement
    (18) statement -> . var_declaration
    (19) statement -> . short_var_declaration
    (20) statement -> . expression_statement
    (21) statement -> . if_statement
    (22) statement -> . for_statement
    (23) statement -> . switch_statement
    (24) statement -> . return_statement
    (25) statement -> . assignment
    (26) statement -> . CONTINUE SEMICOLON
    (27) statement -> . BREAK SEMICOLON
    (49) var_declaration -> . VAR ID array_type EQUAL array_initializer SEMICOLON
    (50) var_declaration -> . VAR ID array_type SEMICOLON
    (51) var_declaration -> . ID WALRUS array_type array_initializer SEMICOLON
    (52) var_declaration -> . VAR ID type EQUAL expression SEMICOLON
    (53) var_declaration -> . VAR ID type SEMICOLON
    (54) short_var_declaration -> . ID WALRUS expression SEMICOLON
    (28) expression_statement -> . expression SEMICOLON
    (29) if_statement -> . IF expression block else_clause
    (33) for_statement -> . FOR for_init SEMICOLON expression SEMICOLON for_post block
    (34) for_statement -> . FOR expression block
    (35) for_statement -> . FOR block
    (40) switch_statement -> . SWITCH expression LBRACE switch_cases default_clause RBRACE
    (46) return_statement -> . RETURN expression_opt SEMICOLON
    (66) assignment -> . ID EQUAL expression SEMICOLON
    (67) assignment -> . array_access EQUAL expression SEMICOLON
    (68) assignment -> . ID EQUAL array_initializer SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    CONTINUE        shift and go to state 136
    BREAK           shift and go to state 137
    VAR             shift and go to state 9
    ID              shift and go to state 138
    IF              shift and go to state 140
    FOR             shift and go to state 141
    SWITCH          shift and go to state 142
    RETURN          shift and go to state 143
    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 139
    statements                     shift and go to state 203
    statement                      shift and go to state 127
    var_declaration                shift and go to state 128
    short_var_declaration          shift and go to state 129
    expression_statement           shift and go to state 130
    if_statement                   shift and go to state 131
    for_statement                  shift and go to state 132
    switch_statement               shift and go to state 133
    return_statement               shift and go to state 134
    assignment                     shift and go to state 135
    array_access                   shift and go to state 144
    literal                        shift and go to state 23
    function_call                  shift and go to state 25

state 201

    (33) for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post block .

    CONTINUE        reduce using rule 33 (for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post block .)
    BREAK           reduce using rule 33 (for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post block .)
    VAR             reduce using rule 33 (for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post block .)
    ID              reduce using rule 33 (for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post block .)
    IF              reduce using rule 33 (for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post block .)
    FOR             reduce using rule 33 (for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post block .)
    SWITCH          reduce using rule 33 (for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post block .)
    RETURN          reduce using rule 33 (for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post block .)
    NOT             reduce using rule 33 (for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post block .)
    MINUS           reduce using rule 33 (for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post block .)
    LPAREN          reduce using rule 33 (for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post block .)
    NUMBER_LITERAL  reduce using rule 33 (for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post block .)
    STRING_LITERAL  reduce using rule 33 (for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post block .)
    BOOLEAN_LITERAL reduce using rule 33 (for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post block .)
    RBRACE          reduce using rule 33 (for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post block .)
    DEFAULT         reduce using rule 33 (for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post block .)
    CASE            reduce using rule 33 (for_statement -> FOR for_init SEMICOLON expression SEMICOLON for_post block .)


state 202

    (44) default_clause -> DEFAULT COLON statements .
    (16) statements -> statements . statement
    (18) statement -> . var_declaration
    (19) statement -> . short_var_declaration
    (20) statement -> . expression_statement
    (21) statement -> . if_statement
    (22) statement -> . for_statement
    (23) statement -> . switch_statement
    (24) statement -> . return_statement
    (25) statement -> . assignment
    (26) statement -> . CONTINUE SEMICOLON
    (27) statement -> . BREAK SEMICOLON
    (49) var_declaration -> . VAR ID array_type EQUAL array_initializer SEMICOLON
    (50) var_declaration -> . VAR ID array_type SEMICOLON
    (51) var_declaration -> . ID WALRUS array_type array_initializer SEMICOLON
    (52) var_declaration -> . VAR ID type EQUAL expression SEMICOLON
    (53) var_declaration -> . VAR ID type SEMICOLON
    (54) short_var_declaration -> . ID WALRUS expression SEMICOLON
    (28) expression_statement -> . expression SEMICOLON
    (29) if_statement -> . IF expression block else_clause
    (33) for_statement -> . FOR for_init SEMICOLON expression SEMICOLON for_post block
    (34) for_statement -> . FOR expression block
    (35) for_statement -> . FOR block
    (40) switch_statement -> . SWITCH expression LBRACE switch_cases default_clause RBRACE
    (46) return_statement -> . RETURN expression_opt SEMICOLON
    (66) assignment -> . ID EQUAL expression SEMICOLON
    (67) assignment -> . array_access EQUAL expression SEMICOLON
    (68) assignment -> . ID EQUAL array_initializer SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    RBRACE          reduce using rule 44 (default_clause -> DEFAULT COLON statements .)
    CONTINUE        shift and go to state 136
    BREAK           shift and go to state 137
    VAR             shift and go to state 9
    ID              shift and go to state 138
    IF              shift and go to state 140
    FOR             shift and go to state 141
    SWITCH          shift and go to state 142
    RETURN          shift and go to state 143
    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    statement                      shift and go to state 146
    var_declaration                shift and go to state 128
    short_var_declaration          shift and go to state 129
    expression_statement           shift and go to state 130
    if_statement                   shift and go to state 131
    for_statement                  shift and go to state 132
    switch_statement               shift and go to state 133
    return_statement               shift and go to state 134
    assignment                     shift and go to state 135
    expression                     shift and go to state 139
    array_access                   shift and go to state 144
    literal                        shift and go to state 23
    function_call                  shift and go to state 25

state 203

    (43) switch_case -> CASE expression COLON statements .
    (16) statements -> statements . statement
    (18) statement -> . var_declaration
    (19) statement -> . short_var_declaration
    (20) statement -> . expression_statement
    (21) statement -> . if_statement
    (22) statement -> . for_statement
    (23) statement -> . switch_statement
    (24) statement -> . return_statement
    (25) statement -> . assignment
    (26) statement -> . CONTINUE SEMICOLON
    (27) statement -> . BREAK SEMICOLON
    (49) var_declaration -> . VAR ID array_type EQUAL array_initializer SEMICOLON
    (50) var_declaration -> . VAR ID array_type SEMICOLON
    (51) var_declaration -> . ID WALRUS array_type array_initializer SEMICOLON
    (52) var_declaration -> . VAR ID type EQUAL expression SEMICOLON
    (53) var_declaration -> . VAR ID type SEMICOLON
    (54) short_var_declaration -> . ID WALRUS expression SEMICOLON
    (28) expression_statement -> . expression SEMICOLON
    (29) if_statement -> . IF expression block else_clause
    (33) for_statement -> . FOR for_init SEMICOLON expression SEMICOLON for_post block
    (34) for_statement -> . FOR expression block
    (35) for_statement -> . FOR block
    (40) switch_statement -> . SWITCH expression LBRACE switch_cases default_clause RBRACE
    (46) return_statement -> . RETURN expression_opt SEMICOLON
    (66) assignment -> . ID EQUAL expression SEMICOLON
    (67) assignment -> . array_access EQUAL expression SEMICOLON
    (68) assignment -> . ID EQUAL array_initializer SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression TIMES expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression MODULO expression
    (74) expression -> . expression EQUALITY expression
    (75) expression -> . expression NOTEQUAL expression
    (76) expression -> . expression GREATER expression
    (77) expression -> . expression LESS expression
    (78) expression -> . expression GREATEROREQUAL expression
    (79) expression -> . expression LESSOREQUAL expression
    (80) expression -> . expression CONDITIONALAND expression
    (81) expression -> . expression CONDITIONALOR expression
    (82) expression -> . NOT expression
    (83) expression -> . MINUS expression
    (84) expression -> . LPAREN expression RPAREN
    (85) expression -> . literal
    (86) expression -> . ID
    (87) expression -> . array_access
    (88) expression -> . ID INCREMENT
    (89) expression -> . ID DECREMENT
    (90) expression -> . function_call
    (64) array_access -> . ID LBRACKET expression RBRACKET
    (65) array_access -> . array_access LBRACKET expression RBRACKET
    (98) literal -> . NUMBER_LITERAL
    (99) literal -> . STRING_LITERAL
    (100) literal -> . BOOLEAN_LITERAL
    (91) function_call -> . ID LPAREN arguments_opt RPAREN

    DEFAULT         reduce using rule 43 (switch_case -> CASE expression COLON statements .)
    CASE            reduce using rule 43 (switch_case -> CASE expression COLON statements .)
    RBRACE          reduce using rule 43 (switch_case -> CASE expression COLON statements .)
    CONTINUE        shift and go to state 136
    BREAK           shift and go to state 137
    VAR             shift and go to state 9
    ID              shift and go to state 138
    IF              shift and go to state 140
    FOR             shift and go to state 141
    SWITCH          shift and go to state 142
    RETURN          shift and go to state 143
    NOT             shift and go to state 21
    MINUS           shift and go to state 20
    LPAREN          shift and go to state 22
    NUMBER_LITERAL  shift and go to state 19
    STRING_LITERAL  shift and go to state 31
    BOOLEAN_LITERAL shift and go to state 32

    expression                     shift and go to state 139
    statement                      shift and go to state 146
    var_declaration                shift and go to state 128
    short_var_declaration          shift and go to state 129
    expression_statement           shift and go to state 130
    if_statement                   shift and go to state 131
    for_statement                  shift and go to state 132
    switch_statement               shift and go to state 133
    return_statement               shift and go to state 134
    assignment                     shift and go to state 135
    array_access                   shift and go to state 144
    literal                        shift and go to state 23
    function_call                  shift and go to state 25
